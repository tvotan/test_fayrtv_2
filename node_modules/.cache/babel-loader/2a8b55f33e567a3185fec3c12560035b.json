{"ast":null,"code":"var _jsxFileName = \"/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/ComboBox/ComboBox.tsx\";\nimport React from 'react'; // import { DropdownProps, Menu, Input, Icon } from 'semantic-ui-react';\n\nimport { Menu } from 'semantic-ui-react';\nimport { debounce, getYouTubeResults } from '../../utils';\nimport { examples } from '../../utils/examples';\nimport { YouTubeSearchResult } from '../SearchResult/SearchResult';\nexport class ComboBox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      inputMedia: undefined,\n      results: undefined,\n      loading: false,\n      lastResultTimestamp: Number(new Date())\n    };\n    this.debounced = null;\n\n    this.setMedia = (e, data) => {\n      window.setTimeout(() => this.setState({\n        inputMedia: undefined,\n        results: undefined\n      }), 300);\n      this.props.setMedia(e, data);\n    };\n\n    this.doSearch = async e => {\n      e.persist();\n      this.setState({\n        inputMedia: e.target.value\n      }, () => {\n        if (!this.debounced) {\n          this.debounced = debounce(async () => {\n            this.setState({\n              loading: true\n            });\n            const query = this.state.inputMedia || '';\n            let timestamp = Number(new Date());\n            let results = undefined;\n\n            if (query === '' || query && query.startsWith('http')) {\n              results = examples.map(option => /*#__PURE__*/React.createElement(Menu.Item, {\n                key: option.url,\n                onClick: e => this.setMedia(e, {\n                  value: option.url\n                }),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 15\n                }\n              }, option.url));\n            } else {\n              const data = await getYouTubeResults(query);\n              results = data.map(result => /*#__PURE__*/React.createElement(YouTubeSearchResult, Object.assign({\n                key: result.url\n              }, result, {\n                setMedia: this.setMedia,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 15\n                }\n              })));\n            }\n\n            if (timestamp > this.state.lastResultTimestamp) {\n              this.setState({\n                loading: false,\n                results,\n                lastResultTimestamp: timestamp\n              });\n            }\n          }, 500);\n        }\n\n        this.debounced();\n      });\n    };\n  }\n\n  render() {\n    // const { currentMedia, getMediaDisplayName } = this.props;\n    const {\n      results\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }), Boolean(results) && this.state.inputMedia !== undefined && /*#__PURE__*/React.createElement(Menu, {\n      fluid: true,\n      vertical: true,\n      style: {\n        position: 'absolute',\n        top: '22px',\n        maxHeight: '250px',\n        overflow: 'scroll',\n        zIndex: 1001\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, results));\n  }\n\n}","map":{"version":3,"sources":["/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/ComboBox/ComboBox.tsx"],"names":["React","Menu","debounce","getYouTubeResults","examples","YouTubeSearchResult","ComboBox","Component","state","inputMedia","undefined","results","loading","lastResultTimestamp","Number","Date","debounced","setMedia","e","data","window","setTimeout","setState","props","doSearch","persist","target","value","query","timestamp","startsWith","map","option","url","result","render","position","display","Boolean","top","maxHeight","overflow","zIndex"],"mappings":"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","sourcesContent":["import React from 'react';\n// import { DropdownProps, Menu, Input, Icon } from 'semantic-ui-react';\nimport { DropdownProps, Menu } from 'semantic-ui-react';\nimport { debounce, getYouTubeResults } from '../../utils';\nimport { examples } from '../../utils/examples';\nimport { YouTubeSearchResult } from '../SearchResult/SearchResult';\n\ninterface ComboBoxProps {\n  setMedia: Function;\n  currentMedia: string;\n  getMediaDisplayName: Function;\n  launchMultiSelect: Function;\n  mediaPath: string | undefined;\n  streamPath: string | undefined;\n  disabled?: boolean;\n}\n\nexport class ComboBox extends React.Component<ComboBoxProps> {\n  state = {\n    inputMedia: undefined as string | undefined,\n    results: undefined,\n    loading: false,\n    lastResultTimestamp: Number(new Date()),\n  };\n  debounced: any = null;\n\n  setMedia = (e: any, data: DropdownProps) => {\n    window.setTimeout(\n      () => this.setState({ inputMedia: undefined, results: undefined }),\n      300\n    );\n    this.props.setMedia(e, data);\n  };\n\n  doSearch = async (e: any) => {\n    e.persist();\n    this.setState({ inputMedia: e.target.value }, () => {\n      if (!this.debounced) {\n        this.debounced = debounce(async () => {\n          this.setState({ loading: true });\n          const query: string = this.state.inputMedia || '';\n          let timestamp = Number(new Date());\n          let results: JSX.Element[] | undefined = undefined;\n          if (query === '' || (query && query.startsWith('http'))) {\n            results = examples.map((option: any) => (\n              <Menu.Item\n                key={option.url}\n                onClick={(e: any) => this.setMedia(e, { value: option.url })}\n              >\n                {option.url}\n              </Menu.Item>\n            ));\n          } else {\n            const data = await getYouTubeResults(query);\n            results = data.map((result) => (\n              <YouTubeSearchResult\n                key={result.url}\n                {...result}\n                setMedia={this.setMedia}\n              />\n            ));\n          }\n          if (timestamp > this.state.lastResultTimestamp) {\n            this.setState({\n              loading: false,\n              results,\n              lastResultTimestamp: timestamp,\n            });\n          }\n        }, 500);\n      }\n      this.debounced();\n    });\n  };\n\n  render() {\n    // const { currentMedia, getMediaDisplayName } = this.props;\n    const { results } = this.state;\n    return (\n      <div style={{ position: 'relative' }}>\n        <div style={{ display: 'flex' }}>\n          {/* <Input\n            style={{ flexGrow: 1 }}\n            inverted\n            fluid\n            focus\n            disabled={this.props.disabled}\n            onChange={this.doSearch}\n            onFocus={(e: any) => {\n              e.persist();\n              this.setState(\n                {\n                  inputMedia: getMediaDisplayName(currentMedia),\n                },\n                () => {\n                  if (\n                    !this.state.inputMedia ||\n                    (this.state.inputMedia &&\n                      this.state.inputMedia.startsWith('http'))\n                  ) {\n                    this.doSearch(e);\n                  }\n                }\n              );\n              setTimeout(() => e.target.select(), 100);\n            }}\n            onBlur={() =>\n              setTimeout(\n                () =>\n                  this.setState({ inputMedia: undefined, results: undefined }),\n                100\n              )\n            }\n            onKeyPress={(e: any) => {\n              if (e.key === 'Enter') {\n                this.setMedia(e, {\n                  value: this.state.inputMedia,\n                });\n              }\n            }}\n            icon={\n              <Icon\n                onClick={(e: any) =>\n                  this.setMedia(e, {\n                    value: this.state.inputMedia,\n                  })\n                }\n                name=\"arrow right\"\n                link\n                circular\n                //bordered\n              />\n            }\n            loading={this.state.loading}\n            label={'Now Watching:'}\n            placeholder=\"Enter video file URL, YouTube link, or YouTube search term\"\n            value={\n              this.state.inputMedia !== undefined\n                ? this.state.inputMedia\n                : getMediaDisplayName(currentMedia)\n            }\n          /> */}\n        </div>\n        {Boolean(results) && this.state.inputMedia !== undefined && (\n          <Menu\n            fluid\n            vertical\n            style={{\n              position: 'absolute',\n              top: '22px',\n              maxHeight: '250px',\n              overflow: 'scroll',\n              zIndex: 1001,\n            }}\n          >\n            {results}\n          </Menu>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}