{"ast":null,"code":"let _EVENT$MESSAGE, _EVENT$CONNECTING, _EVENT$CONNECTED, _EVENT$DISCONNECTED, _EVENT$TRACK, _EVENT$DATA;\n\nimport EventEmitter from 'eventemitter3';\nimport { iceServers } from '../../utils';\nimport { OPCODE } from './data';\nimport { EVENT } from './events';\n_EVENT$MESSAGE = EVENT.MESSAGE;\n_EVENT$CONNECTING = EVENT.CONNECTING;\n_EVENT$CONNECTED = EVENT.CONNECTED;\n_EVENT$DISCONNECTED = EVENT.DISCONNECTED;\n_EVENT$TRACK = EVENT.TRACK;\n_EVENT$DATA = EVENT.DATA;\nexport class BaseClient extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n    this._ws = void 0;\n    this._peer = void 0;\n    this._channel = void 0;\n    this._timeout = void 0;\n    this._displayname = void 0;\n    this._state = 'disconnected';\n    this._id = '';\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get supported() {\n    return typeof RTCPeerConnection !== 'undefined' && typeof RTCPeerConnection.prototype.addTransceiver !== 'undefined';\n  }\n\n  get socketOpen() {\n    return typeof this._ws !== 'undefined' && this._ws.readyState === WebSocket.OPEN;\n  }\n\n  get peerConnected() {\n    return typeof this._peer !== 'undefined' && ['connected', 'checking', 'completed'].includes(this._state);\n  }\n\n  get connected() {\n    return this.peerConnected && this.socketOpen;\n  }\n\n  connect(url, password, displayname) {\n    if (this.socketOpen) {\n      this.emit('warn', `attempting to create websocket while connection open`);\n      return;\n    }\n\n    if (!this.supported) {\n      this.onDisconnected(new Error('browser does not support webrtc (RTCPeerConnection missing)'));\n      return;\n    }\n\n    if (displayname === '') {\n      throw new Error('Must add a displayname');\n    }\n\n    this._displayname = displayname;\n    this[EVENT.CONNECTING]();\n\n    try {\n      this._ws = new WebSocket(`${url}ws?password=${password}`);\n      this.emit('debug', `connecting to ${this._ws.url}`);\n      this._ws.onmessage = this.onMessage.bind(this);\n\n      this._ws.onerror = event => this.onError.bind(this);\n\n      this._ws.onclose = event => this.onDisconnected.bind(this, new Error('websocket closed'));\n\n      this._timeout = setTimeout(this.onTimeout.bind(this), 15000);\n    } catch (err) {\n      this.onDisconnected(err);\n    }\n  }\n\n  disconnect() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    if (this.socketOpen) {\n      try {\n        this._ws.close();\n      } catch (err) {}\n\n      this._ws = undefined;\n    }\n\n    if (this.peerConnected) {\n      try {\n        this._peer.close();\n      } catch (err) {}\n\n      this._peer = undefined;\n    }\n\n    this._state = 'disconnected';\n    this._displayname = undefined;\n    this._id = '';\n  }\n\n  sendData(event, data) {\n    if (!this.connected) {\n      this.emit('warn', `attempting to send data while disconnected`);\n      return;\n    }\n\n    let buffer;\n    let payload;\n\n    switch (event) {\n      case 'mousemove':\n        buffer = new ArrayBuffer(7);\n        payload = new DataView(buffer);\n        payload.setUint8(0, OPCODE.MOVE);\n        payload.setUint16(1, 4, true);\n        payload.setUint16(3, data.x, true);\n        payload.setUint16(5, data.y, true);\n        break;\n\n      case 'wheel':\n        buffer = new ArrayBuffer(7);\n        payload = new DataView(buffer);\n        payload.setUint8(0, OPCODE.SCROLL);\n        payload.setUint16(1, 4, true);\n        payload.setInt16(3, data.x, true);\n        payload.setInt16(5, data.y, true);\n        break;\n\n      case 'keydown':\n      case 'mousedown':\n        buffer = new ArrayBuffer(5);\n        payload = new DataView(buffer);\n        payload.setUint8(0, OPCODE.KEY_DOWN);\n        payload.setUint16(1, 1, true);\n        payload.setUint16(3, data.key, true);\n        break;\n\n      case 'keyup':\n      case 'mouseup':\n        buffer = new ArrayBuffer(5);\n        payload = new DataView(buffer);\n        payload.setUint8(0, OPCODE.KEY_UP);\n        payload.setUint16(1, 1, true);\n        payload.setUint16(3, data.key, true);\n        break;\n\n      default:\n        this.emit('warn', `unknown data event: ${event}`);\n    } // @ts-ignore\n\n\n    if (typeof buffer !== 'undefined') {\n      this._channel.send(buffer);\n    }\n  }\n\n  sendMessage(event, payload) {\n    if (!this.connected) {\n      this.emit('warn', `attempting to send message while disconnected`);\n      return;\n    }\n\n    this.emit('debug', `sending event '${event}' ${payload ? `with payload: ` : ''}`, payload);\n\n    this._ws.send(JSON.stringify({\n      event,\n      ...payload\n    }));\n  }\n\n  createPeer(sdp, lite, servers) {\n    this.emit('debug', `creating peer`);\n\n    if (!this.socketOpen) {\n      this.emit('warn', `attempting to create peer with no websocket: `, this._ws ? `state: ${this._ws.readyState}` : 'no socket');\n      return;\n    }\n\n    if (this.peerConnected) {\n      this.emit('warn', `attempting to create peer while connected`);\n      return;\n    }\n\n    this._peer = new RTCPeerConnection();\n\n    if (lite !== true) {\n      this._peer = new RTCPeerConnection({\n        iceServers: servers ? [{\n          urls: servers\n        }] : iceServers()\n      });\n    }\n\n    this._peer.onconnectionstatechange = event => {\n      this.emit('debug', `peer connection state changed`, this._peer ? this._peer.connectionState : undefined);\n    };\n\n    this._peer.onsignalingstatechange = event => {\n      this.emit('debug', `peer signaling state changed`, this._peer ? this._peer.signalingState : undefined);\n    };\n\n    this._peer.oniceconnectionstatechange = event => {\n      this._state = this._peer.iceConnectionState;\n      this.emit('debug', `peer ice connection state changed: ${this._peer.iceConnectionState}`);\n\n      switch (this._state) {\n        case 'checking':\n          if (this._timeout) {\n            clearTimeout(this._timeout);\n          }\n\n          break;\n\n        case 'connected':\n          this.onConnected();\n          break;\n\n        case 'failed':\n          this.onDisconnected(new Error('peer failed'));\n          break;\n\n        case 'disconnected':\n          this.onDisconnected(new Error('peer disconnected'));\n          break;\n      }\n    };\n\n    this._peer.ontrack = this.onTrack.bind(this);\n\n    this._peer.addTransceiver('audio', {\n      direction: 'recvonly'\n    });\n\n    this._peer.addTransceiver('video', {\n      direction: 'recvonly'\n    });\n\n    this._channel = this._peer.createDataChannel('data');\n    this._channel.onerror = this.onError.bind(this);\n    this._channel.onmessage = this.onData.bind(this);\n    this._channel.onclose = this.onDisconnected.bind(this, new Error('peer data channel closed'));\n\n    this._peer.setRemoteDescription({\n      type: 'offer',\n      sdp\n    });\n\n    this._peer.createAnswer().then(d => {\n      this._peer.setLocalDescription(d);\n\n      this._ws.send(JSON.stringify({\n        event: EVENT.SIGNAL.ANSWER,\n        sdp: d.sdp,\n        displayname: this._displayname\n      }));\n    }).catch(err => this.emit('error', err));\n  }\n\n  onMessage(e) {\n    const {\n      event,\n      ...payload\n    } = JSON.parse(e.data);\n    this.emit('debug', `received websocket event ${event} ${payload ? `with payload: ` : ''}`, payload);\n\n    if (event === EVENT.SIGNAL.PROVIDE) {\n      const {\n        sdp,\n        lite,\n        ice,\n        id\n      } = payload;\n      this._id = id;\n      this.createPeer(sdp, lite, ice);\n      return;\n    } // @ts-ignore\n\n\n    if (typeof this[event] === 'function') {\n      // @ts-ignore\n      this[event](payload);\n    } else {\n      this[EVENT.MESSAGE](event, payload);\n    }\n  }\n\n  onData(e) {\n    this[EVENT.DATA](e.data);\n  }\n\n  onTrack(event) {\n    this.emit('debug', `received ${event.track.kind} track from peer: ${event.track.id}`, event);\n    const stream = event.streams[0];\n\n    if (!stream) {\n      this.emit('warn', `no stream provided for track ${event.track.id}(${event.track.label})`);\n      return;\n    }\n\n    this[EVENT.TRACK](event);\n  }\n\n  onError(event) {\n    this.emit('error', event.error);\n  }\n\n  onConnected() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    if (!this.connected) {\n      this.emit('warn', `onConnected called while being disconnected`);\n      return;\n    }\n\n    this.emit('debug', `connected`);\n    this[EVENT.CONNECTED]();\n  }\n\n  onTimeout() {\n    this.emit('debug', `connection timeout`);\n\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this.onDisconnected(new Error('connection timeout'));\n  }\n\n  onDisconnected(reason) {\n    this.disconnect();\n    this.emit('debug', `disconnected:`, reason);\n    this[EVENT.DISCONNECTED](reason);\n  }\n\n  [_EVENT$MESSAGE](event, payload) {\n    this.emit('warn', `unhandled websocket event '${event}':`, payload);\n  }\n\n}","map":{"version":3,"sources":["/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/VBrowser/base.ts"],"names":["EventEmitter","iceServers","OPCODE","EVENT","MESSAGE","CONNECTING","CONNECTED","DISCONNECTED","TRACK","DATA","BaseClient","_ws","_peer","_channel","_timeout","_displayname","_state","_id","id","supported","RTCPeerConnection","prototype","addTransceiver","socketOpen","readyState","WebSocket","OPEN","peerConnected","includes","connected","connect","url","password","displayname","emit","onDisconnected","Error","onmessage","onMessage","bind","onerror","event","onError","onclose","setTimeout","onTimeout","err","disconnect","clearTimeout","close","undefined","sendData","data","buffer","payload","ArrayBuffer","DataView","setUint8","MOVE","setUint16","x","y","SCROLL","setInt16","KEY_DOWN","key","KEY_UP","send","sendMessage","JSON","stringify","createPeer","sdp","lite","servers","urls","onconnectionstatechange","connectionState","onsignalingstatechange","signalingState","oniceconnectionstatechange","iceConnectionState","onConnected","ontrack","onTrack","direction","createDataChannel","onData","setRemoteDescription","type","createAnswer","then","d","setLocalDescription","SIGNAL","ANSWER","catch","e","parse","PROVIDE","ice","track","kind","stream","streams","label","error","reason"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\n\nimport { iceServers } from '../../utils';\nimport { OPCODE } from './data';\nimport { EVENT, WebSocketEvents } from './events';\nimport {\n  SignalProvidePayload,\n  WebSocketMessages,\n  WebSocketPayloads,\n} from './messages';\n\nexport abstract class BaseClient extends EventEmitter<any> {\n  protected _ws?: WebSocket;\n  protected _peer?: RTCPeerConnection;\n  protected _channel?: RTCDataChannel;\n  protected _timeout?: NodeJS.Timeout;\n  protected _displayname?: string;\n  protected _state: RTCIceConnectionState = 'disconnected';\n  protected _id = '';\n\n  get id() {\n    return this._id;\n  }\n\n  get supported() {\n    return (\n      typeof RTCPeerConnection !== 'undefined' &&\n      typeof RTCPeerConnection.prototype.addTransceiver !== 'undefined'\n    );\n  }\n\n  get socketOpen() {\n    return (\n      typeof this._ws !== 'undefined' && this._ws.readyState === WebSocket.OPEN\n    );\n  }\n\n  get peerConnected() {\n    return (\n      typeof this._peer !== 'undefined' &&\n      ['connected', 'checking', 'completed'].includes(this._state)\n    );\n  }\n\n  get connected() {\n    return this.peerConnected && this.socketOpen;\n  }\n\n  public connect(url: string, password: string, displayname: string) {\n    if (this.socketOpen) {\n      this.emit('warn', `attempting to create websocket while connection open`);\n      return;\n    }\n\n    if (!this.supported) {\n      this.onDisconnected(\n        new Error('browser does not support webrtc (RTCPeerConnection missing)')\n      );\n      return;\n    }\n\n    if (displayname === '') {\n      throw new Error('Must add a displayname');\n    }\n\n    this._displayname = displayname;\n    this[EVENT.CONNECTING]();\n\n    try {\n      this._ws = new WebSocket(`${url}ws?password=${password}`);\n      this.emit('debug', `connecting to ${this._ws.url}`);\n      this._ws.onmessage = this.onMessage.bind(this);\n      this._ws.onerror = (event) => this.onError.bind(this);\n      this._ws.onclose = (event) =>\n        this.onDisconnected.bind(this, new Error('websocket closed'));\n      this._timeout = setTimeout(this.onTimeout.bind(this), 15000);\n    } catch (err) {\n      this.onDisconnected(err);\n    }\n  }\n\n  protected disconnect() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    if (this.socketOpen) {\n      try {\n        this._ws!.close();\n      } catch (err) {}\n      this._ws = undefined;\n    }\n\n    if (this.peerConnected) {\n      try {\n        this._peer!.close();\n      } catch (err) {}\n      this._peer = undefined;\n    }\n\n    this._state = 'disconnected';\n    this._displayname = undefined;\n    this._id = '';\n  }\n\n  public sendData(\n    event: 'wheel' | 'mousemove',\n    data: { x: number; y: number }\n  ): void;\n  public sendData(\n    event: 'mousedown' | 'mouseup' | 'keydown' | 'keyup',\n    data: { key: number }\n  ): void;\n  public sendData(event: string, data: any) {\n    if (!this.connected) {\n      this.emit('warn', `attempting to send data while disconnected`);\n      return;\n    }\n\n    let buffer: ArrayBuffer;\n    let payload: DataView;\n    switch (event) {\n      case 'mousemove':\n        buffer = new ArrayBuffer(7);\n        payload = new DataView(buffer);\n        payload.setUint8(0, OPCODE.MOVE);\n        payload.setUint16(1, 4, true);\n        payload.setUint16(3, data.x, true);\n        payload.setUint16(5, data.y, true);\n        break;\n      case 'wheel':\n        buffer = new ArrayBuffer(7);\n        payload = new DataView(buffer);\n        payload.setUint8(0, OPCODE.SCROLL);\n        payload.setUint16(1, 4, true);\n        payload.setInt16(3, data.x, true);\n        payload.setInt16(5, data.y, true);\n        break;\n      case 'keydown':\n      case 'mousedown':\n        buffer = new ArrayBuffer(5);\n        payload = new DataView(buffer);\n        payload.setUint8(0, OPCODE.KEY_DOWN);\n        payload.setUint16(1, 1, true);\n        payload.setUint16(3, data.key, true);\n        break;\n      case 'keyup':\n      case 'mouseup':\n        buffer = new ArrayBuffer(5);\n        payload = new DataView(buffer);\n        payload.setUint8(0, OPCODE.KEY_UP);\n        payload.setUint16(1, 1, true);\n        payload.setUint16(3, data.key, true);\n        break;\n      default:\n        this.emit('warn', `unknown data event: ${event}`);\n    }\n\n    // @ts-ignore\n    if (typeof buffer !== 'undefined') {\n      this._channel!.send(buffer);\n    }\n  }\n\n  public sendMessage(event: WebSocketEvents, payload?: WebSocketPayloads) {\n    if (!this.connected) {\n      this.emit('warn', `attempting to send message while disconnected`);\n      return;\n    }\n    this.emit(\n      'debug',\n      `sending event '${event}' ${payload ? `with payload: ` : ''}`,\n      payload\n    );\n    this._ws!.send(JSON.stringify({ event, ...payload }));\n  }\n\n  public createPeer(sdp: string, lite: boolean, servers: string[]) {\n    this.emit('debug', `creating peer`);\n    if (!this.socketOpen) {\n      this.emit(\n        'warn',\n        `attempting to create peer with no websocket: `,\n        this._ws ? `state: ${this._ws.readyState}` : 'no socket'\n      );\n      return;\n    }\n\n    if (this.peerConnected) {\n      this.emit('warn', `attempting to create peer while connected`);\n      return;\n    }\n\n    this._peer = new RTCPeerConnection();\n    if (lite !== true) {\n      this._peer = new RTCPeerConnection({\n        iceServers: servers ? [{ urls: servers }] : iceServers(),\n      });\n    }\n\n    this._peer.onconnectionstatechange = (event) => {\n      this.emit(\n        'debug',\n        `peer connection state changed`,\n        this._peer ? this._peer.connectionState : undefined\n      );\n    };\n\n    this._peer.onsignalingstatechange = (event) => {\n      this.emit(\n        'debug',\n        `peer signaling state changed`,\n        this._peer ? this._peer.signalingState : undefined\n      );\n    };\n\n    this._peer.oniceconnectionstatechange = (event) => {\n      this._state = this._peer!.iceConnectionState;\n\n      this.emit(\n        'debug',\n        `peer ice connection state changed: ${this._peer!.iceConnectionState}`\n      );\n\n      switch (this._state) {\n        case 'checking':\n          if (this._timeout) {\n            clearTimeout(this._timeout);\n          }\n          break;\n        case 'connected':\n          this.onConnected();\n          break;\n        case 'failed':\n          this.onDisconnected(new Error('peer failed'));\n          break;\n        case 'disconnected':\n          this.onDisconnected(new Error('peer disconnected'));\n          break;\n      }\n    };\n\n    this._peer.ontrack = this.onTrack.bind(this);\n    this._peer.addTransceiver('audio', { direction: 'recvonly' });\n    this._peer.addTransceiver('video', { direction: 'recvonly' });\n\n    this._channel = this._peer.createDataChannel('data');\n    this._channel.onerror = this.onError.bind(this);\n    this._channel.onmessage = this.onData.bind(this);\n    this._channel.onclose = this.onDisconnected.bind(\n      this,\n      new Error('peer data channel closed')\n    );\n\n    this._peer.setRemoteDescription({ type: 'offer', sdp });\n    this._peer\n      .createAnswer()\n      .then((d) => {\n        this._peer!.setLocalDescription(d);\n        this._ws!.send(\n          JSON.stringify({\n            event: EVENT.SIGNAL.ANSWER,\n            sdp: d.sdp,\n            displayname: this._displayname,\n          })\n        );\n      })\n      .catch((err) => this.emit('error', err));\n  }\n\n  private onMessage(e: MessageEvent) {\n    const { event, ...payload } = JSON.parse(e.data) as WebSocketMessages;\n\n    this.emit(\n      'debug',\n      `received websocket event ${event} ${payload ? `with payload: ` : ''}`,\n      payload\n    );\n\n    if (event === EVENT.SIGNAL.PROVIDE) {\n      const { sdp, lite, ice, id } = payload as SignalProvidePayload;\n      this._id = id;\n      this.createPeer(sdp, lite, ice);\n      return;\n    }\n\n    // @ts-ignore\n    if (typeof this[event] === 'function') {\n      // @ts-ignore\n      this[event](payload);\n    } else {\n      this[EVENT.MESSAGE](event, payload);\n    }\n  }\n\n  private onData(e: MessageEvent) {\n    this[EVENT.DATA](e.data);\n  }\n\n  private onTrack(event: RTCTrackEvent) {\n    this.emit(\n      'debug',\n      `received ${event.track.kind} track from peer: ${event.track.id}`,\n      event\n    );\n    const stream = event.streams[0];\n    if (!stream) {\n      this.emit(\n        'warn',\n        `no stream provided for track ${event.track.id}(${event.track.label})`\n      );\n      return;\n    }\n    this[EVENT.TRACK](event);\n  }\n\n  private onError(event: Event) {\n    this.emit('error', (event as ErrorEvent).error);\n  }\n\n  private onConnected() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    if (!this.connected) {\n      this.emit('warn', `onConnected called while being disconnected`);\n      return;\n    }\n\n    this.emit('debug', `connected`);\n    this[EVENT.CONNECTED]();\n  }\n\n  private onTimeout() {\n    this.emit('debug', `connection timeout`);\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n    this.onDisconnected(new Error('connection timeout'));\n  }\n\n  protected onDisconnected(reason?: Error) {\n    this.disconnect();\n    this.emit('debug', `disconnected:`, reason);\n    this[EVENT.DISCONNECTED](reason);\n  }\n\n  protected [EVENT.MESSAGE](event: string, payload: any) {\n    this.emit('warn', `unhandled websocket event '${event}':`, payload);\n  }\n\n  protected abstract [EVENT.CONNECTING](): void;\n  protected abstract [EVENT.CONNECTED](): void;\n  protected abstract [EVENT.DISCONNECTED](reason?: Error): void;\n  protected abstract [EVENT.TRACK](event: RTCTrackEvent): void;\n  protected abstract [EVENT.DATA](data: any): void;\n}\n"]},"metadata":{},"sourceType":"module"}