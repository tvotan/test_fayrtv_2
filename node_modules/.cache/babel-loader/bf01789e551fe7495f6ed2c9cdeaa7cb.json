{"ast":null,"code":"var _jsxFileName = \"/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/Settings/LocalSettings.tsx\";\nimport React from 'react';\nimport { Button, Form, Header, Icon, Modal, TextArea } from 'semantic-ui-react';\nexport const SettingsModal = ({\n  trigger\n}) => /*#__PURE__*/React.createElement(Modal, {\n  trigger: trigger,\n  basic: true,\n  closeIcon: true,\n  size: \"small\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Header, {\n  icon: \"setting\",\n  content: \"Settings\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Modal.Content, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Form, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(TextArea, {\n  rows: 10,\n  id: \"settings_textarea\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }\n}, window.localStorage.getItem('watchparty-setting') || JSON.stringify(getDefaultSettings(), null, 2)))), /*#__PURE__*/React.createElement(Modal.Actions, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  color: \"green\",\n  inverted: true,\n  onClick: () => {\n    const newSetting = document.getElementById('settings_textarea').value;\n\n    try {\n      validateSettingsString(newSetting);\n      updateSettings(newSetting);\n      window.location.reload();\n    } catch (e) {\n      alert(e);\n    }\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Icon, {\n  name: \"checkmark\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }\n}), \"Save\")));\nexport function getDefaultSettings() {\n  return {};\n}\nexport function getCurrentSettings() {\n  const setting = window.localStorage.getItem('watchparty-setting');\n\n  try {\n    let settings = validateSettingsString(setting);\n\n    if (!settings) {\n      return {};\n    }\n\n    return settings;\n  } catch (e) {\n    console.warn(e);\n    return getDefaultSettings();\n  }\n}\n/**\n * Validate a setting string. Return a parsed setting object if valid, otherwise throw exception\n */\n\nexport function validateSettingsString(setting) {\n  // Don't have a setting or invalid value\n  let settingObject = JSON.parse(setting);\n\n  if (!setting) {\n    return {};\n  }\n\n  if (setting[0] !== '{') {\n    throw new Error('failed to parse settings, using defaults');\n  }\n\n  return settingObject;\n}\nexport function updateSettings(newSetting) {\n  window.localStorage.setItem('watchparty-setting', newSetting);\n}","map":{"version":3,"sources":["/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/Settings/LocalSettings.tsx"],"names":["React","Button","Form","Header","Icon","Modal","TextArea","SettingsModal","trigger","window","localStorage","getItem","JSON","stringify","getDefaultSettings","newSetting","document","getElementById","value","validateSettingsString","updateSettings","location","reload","e","alert","getCurrentSettings","setting","settings","console","warn","settingObject","parse","Error","setItem"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, Form, Header, Icon, Modal, TextArea } from 'semantic-ui-react';\n\nexport const SettingsModal = ({ trigger }: any) => (\n  <Modal trigger={trigger} basic closeIcon size=\"small\">\n    <Header icon=\"setting\" content=\"Settings\" />\n    <Modal.Content>\n      <Form>\n        <TextArea rows={10} id=\"settings_textarea\">\n          {window.localStorage.getItem('watchparty-setting') ||\n            JSON.stringify(getDefaultSettings(), null, 2)}\n        </TextArea>\n      </Form>\n    </Modal.Content>\n    <Modal.Actions>\n      <Button\n        color=\"green\"\n        inverted\n        onClick={() => {\n          const newSetting = (document.getElementById(\n            'settings_textarea'\n          ) as HTMLTextAreaElement)!.value;\n          try {\n            validateSettingsString(newSetting);\n            updateSettings(newSetting);\n            window.location.reload();\n          } catch (e) {\n            alert(e);\n          }\n        }}\n      >\n        <Icon name=\"checkmark\" />\n        Save\n      </Button>\n    </Modal.Actions>\n  </Modal>\n);\n\nexport function getDefaultSettings(): Settings {\n  return {};\n}\n\nexport function getCurrentSettings(): Settings {\n  const setting = window.localStorage.getItem('watchparty-setting');\n  try {\n    let settings = validateSettingsString(setting);\n    if (!settings) {\n      return {};\n    }\n    return settings;\n  } catch (e) {\n    console.warn(e);\n    return getDefaultSettings();\n  }\n}\n\n/**\n * Validate a setting string. Return a parsed setting object if valid, otherwise throw exception\n */\nexport function validateSettingsString(\n  setting: string | null\n): Settings | null {\n  // Don't have a setting or invalid value\n  let settingObject: Settings = JSON.parse(setting as any);\n  if (!setting) {\n    return {};\n  }\n  if (setting[0] !== '{') {\n    throw new Error('failed to parse settings, using defaults');\n  }\n  return settingObject;\n}\n\nexport function updateSettings(newSetting: string) {\n  window.localStorage.setItem('watchparty-setting', newSetting);\n}\n"]},"metadata":{},"sourceType":"module"}