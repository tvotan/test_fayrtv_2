{"ast":null,"code":"class WebVTTConverter {\n  constructor(resource) {\n    this.resource = resource;\n  }\n\n  blobToBuffer() {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.addEventListener('loadend', event => {\n        const buf = event.target.result;\n        resolve(new Uint8Array(buf));\n      });\n      reader.addEventListener('error', () => reject('Error while reading the Blob object'));\n      reader.readAsArrayBuffer(this.resource);\n    });\n  }\n  /**\n   * @param {*} blob\n   * @param {*} success\n   * @param {*} fail\n   */\n\n\n  static blobToString(blob, success, fail) {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', event => {\n      const text = event.target.result;\n      success(text);\n    });\n    reader.addEventListener('error', () => fail());\n    reader.readAsText(blob);\n  }\n  /**\n   * @param {*} utf8str\n   */\n\n\n  static toVTT(utf8str) {\n    return utf8str.replace(/\\{\\\\([ibu])\\}/g, '</$1>').replace(/\\{\\\\([ibu])1\\}/g, '<$1>').replace(/\\{([ibu])\\}/g, '<$1>').replace(/\\{\\/([ibu])\\}/g, '</$1>').replace(/(\\d\\d:\\d\\d:\\d\\d),(\\d\\d\\d)/g, '$1.$2').concat('\\r\\n\\r\\n');\n  }\n  /**\n   * @param {*} str\n   */\n\n\n  static toTypedArray(str) {\n    const result = [];\n    str.split('').forEach(each => {\n      result.push(parseInt(each.charCodeAt(), 16));\n    });\n    return Uint8Array.from(result);\n  }\n\n  getURL() {\n    return new Promise((resolve, reject) => {\n      if (!(this.resource instanceof Blob)) return reject('Expecting resource to be a Blob but something else found.');\n      if (!FileReader) return reject('No FileReader constructor found');\n      if (!TextDecoder) return reject('No TextDecoder constructor found');\n      return WebVTTConverter.blobToString(this.resource, decoded => {\n        const vttString = 'WEBVTT FILE\\r\\n\\r\\n';\n        const text = vttString.concat(WebVTTConverter.toVTT(decoded));\n        const blob = new Blob([text], {\n          type: 'text/vtt'\n        });\n        this.objectURL = URL.createObjectURL(blob);\n        return resolve(this.objectURL);\n      }, () => {\n        this.blobToBuffer().then(buffer => {\n          const utf8str = new TextDecoder('utf-8').decode(buffer);\n          const vttString = 'WEBVTT FILE\\r\\n\\r\\n';\n          const text = vttString.concat(WebVTTConverter.toVTT(utf8str));\n          const blob = new Blob([text], {\n            type: 'text/vtt'\n          });\n          this.objectURL = URL.createObjectURL(blob);\n          return resolve(this.objectURL);\n        });\n      });\n    });\n  }\n\n  release() {\n    URL.createObjectURL(this.objectURL);\n  }\n\n}\n\nwindow.WebVTTConverter = WebVTTConverter;\nexport default WebVTTConverter;","map":{"version":3,"sources":["/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/node_modules/srt-webvtt/index.js"],"names":["WebVTTConverter","constructor","resource","blobToBuffer","Promise","resolve","reject","reader","FileReader","addEventListener","event","buf","target","result","Uint8Array","readAsArrayBuffer","blobToString","blob","success","fail","text","readAsText","toVTT","utf8str","replace","concat","toTypedArray","str","split","forEach","each","push","parseInt","charCodeAt","from","getURL","Blob","TextDecoder","decoded","vttString","type","objectURL","URL","createObjectURL","then","buffer","decode","release","window"],"mappings":"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","sourcesContent":["class WebVTTConverter {\n  constructor(resource) {\n    this.resource = resource;\n  }\n\n  blobToBuffer() {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.addEventListener('loadend', (event) => {\n        const buf = event.target.result;\n        resolve(new Uint8Array(buf));\n      });\n      reader.addEventListener('error', () => reject('Error while reading the Blob object'));\n      reader.readAsArrayBuffer(this.resource);\n    });\n  }\n  /**\n   * @param {*} blob\n   * @param {*} success\n   * @param {*} fail\n   */\n  static blobToString(blob, success, fail) {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', (event) => {\n      const text = event.target.result;\n      success(text);\n    });\n    reader.addEventListener('error', () => fail());\n    reader.readAsText(blob);\n  }\n  /**\n   * @param {*} utf8str\n   */\n  static toVTT(utf8str) {\n    return utf8str\n      .replace(/\\{\\\\([ibu])\\}/g, '</$1>')\n      .replace(/\\{\\\\([ibu])1\\}/g, '<$1>')\n      .replace(/\\{([ibu])\\}/g, '<$1>')\n      .replace(/\\{\\/([ibu])\\}/g, '</$1>')\n      .replace(/(\\d\\d:\\d\\d:\\d\\d),(\\d\\d\\d)/g, '$1.$2')\n      .concat('\\r\\n\\r\\n');\n  }\n  /**\n   * @param {*} str\n   */\n  static toTypedArray(str) {\n    const result = [];\n    str.split('').forEach((each) => {\n      result.push(parseInt(each.charCodeAt(), 16));\n    });\n    return Uint8Array.from(result);\n  }\n\n  getURL() {\n    return new Promise((resolve, reject) => {\n      if (!(this.resource instanceof Blob)) return reject('Expecting resource to be a Blob but something else found.');\n      if (!(FileReader)) return reject('No FileReader constructor found');\n      if (!TextDecoder) return reject('No TextDecoder constructor found');\n      return WebVTTConverter.blobToString(\n        this.resource,\n        (decoded) => {\n          const vttString = 'WEBVTT FILE\\r\\n\\r\\n';\n          const text = vttString.concat(WebVTTConverter.toVTT(decoded));\n          const blob = new Blob([text], { type: 'text/vtt' });\n          this.objectURL = URL.createObjectURL(blob);\n          return resolve(this.objectURL);\n        },\n        () => {\n          this.blobToBuffer()\n            .then((buffer) => {\n              const utf8str = new TextDecoder('utf-8').decode(buffer);\n              const vttString = 'WEBVTT FILE\\r\\n\\r\\n';\n              const text = vttString.concat(WebVTTConverter.toVTT(utf8str));\n              const blob = new Blob([text], { type: 'text/vtt' });\n              this.objectURL = URL.createObjectURL(blob);\n              return resolve(this.objectURL);\n            });\n        },\n      );\n    });\n  }\n\n  release() {\n    URL.createObjectURL(this.objectURL);\n  }\n}\n\nwindow.WebVTTConverter = WebVTTConverter;\n\nexport default WebVTTConverter;\n"]},"metadata":{},"sourceType":"module"}