{"ast":null,"code":"var _jsxFileName = \"/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/App/App.tsx\";\nimport './App.css';\nimport querystring from 'querystring';\nimport axios from 'axios'; //@ts-ignore\n\nimport magnet from 'magnet-uri';\nimport React from 'react';\nimport { Button, Dimmer, Dropdown, Grid, Icon, Input, Loader, Message, Modal, Popup, Progress, Menu } from 'semantic-ui-react'; //@ts-ignore\n\nimport io from 'socket.io-client'; //@ts-ignore\n\nimport VTTConverter from 'srt-webvtt';\nimport { formatSpeed, getMediaType, iceServers, isMobile, serverPath, testAutoplay, openFileSelector, getAndSaveClientId } from '../../utils';\nimport { generateName } from '../../utils/generateName';\nimport { Chat } from '../Chat';\nimport { TopBar } from '../TopBar';\nimport { VBrowser } from '../VBrowser';\nimport { VideoChat } from '../VideoChat';\nimport { getCurrentSettings } from '../Settings';\nimport { MultiStreamModal } from '../Modal/MultiStreamModal';\nimport { ComboBox } from '../ComboBox/ComboBox';\nimport { SearchComponent } from '../SearchComponent/SearchComponent';\nimport { Controls } from '../Controls/Controls';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { SubscribeModal } from '../Modal/SubscribeModal';\nimport { VBrowserModal } from '../Modal/VBrowserModal';\nimport { SettingsTab } from '../Settings/SettingsTab';\nimport { ErrorModal } from '../Modal/ErrorModal';\nimport { PasswordModal } from '../Modal/PasswordModal';\nconst firebaseConfig = process.env.REACT_APP_FIREBASE_CONFIG;\n\nif (firebaseConfig) {\n  firebase.initializeApp(JSON.parse(firebaseConfig));\n}\n\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      state: 'starting',\n      currentMedia: '',\n      currentMediaPaused: false,\n      currentSubtitle: '',\n      participants: [],\n      rosterUpdateTS: Number(new Date()),\n      chat: [],\n      tsMap: {},\n      nameMap: {},\n      pictureMap: {},\n      myName: '',\n      myPicture: '',\n      loading: true,\n      scrollTimestamp: 0,\n      fullScreen: false,\n      controlsTimestamp: 0,\n      watchOptions: [],\n      isScreenSharing: false,\n      isScreenSharingFile: false,\n      isVBrowser: false,\n      user: undefined,\n      isYouTubeReady: false,\n      isAutoPlayable: true,\n      downloaded: 0,\n      total: 0,\n      speed: 0,\n      connections: 0,\n      multiStreamSelection: undefined,\n      error: '',\n      isErrorAuth: false,\n      settings: {},\n      vBrowserResolution: '1280x720@30',\n      isVBrowserLarge: false,\n      nonPlayableMedia: false,\n      currentTab: querystring.parse(window.location.search.substring(1)).tab || 'chat',\n      isSubscriber: false,\n      isSubscribeModalOpen: false,\n      isVBrowserModalOpen: false,\n      roomLock: '',\n      controller: '',\n      roomId: '',\n      savedPasswords: {},\n      errorMessage: '',\n      successMessage: ''\n    };\n    this.socket = null;\n    this.watchPartyYTPlayer = null;\n    this.ytDebounce = true;\n    this.screenShareStream = void 0;\n    this.screenHostPC = {};\n    this.screenSharePC = void 0;\n    this.progressUpdater = void 0;\n\n    this.loadSettings = async () => {\n      // Load settings from localstorage and remote\n      const customSettingsData = await fetch(serverPath + '/settings');\n      const customSettings = await customSettingsData.json();\n      let settings = { ...getCurrentSettings(),\n        ...customSettings\n      };\n      this.setState({\n        settings\n      });\n    };\n\n    this.loadSignInData = async () => {\n      const user = this.state.user;\n\n      if (user && this.socket) {\n        var _user$displayName;\n\n        // NOTE: firebase auth doesn't provide the actual first name data that individual providers (G/FB) do\n        // It's accessible at the time the user logs in but not afterward\n        // If we want accurate surname/given name we'll need to save that somewhere\n        const firstName = (_user$displayName = user.displayName) === null || _user$displayName === void 0 ? void 0 : _user$displayName.split(' ')[0];\n\n        if (firstName) {\n          this.updateName(null, {\n            value: firstName\n          });\n        }\n\n        if (user.photoURL) {\n          this.updatePicture(user.photoURL + '?height=128&width=128');\n        }\n\n        this.updateUid(user);\n        const token = await user.getIdToken();\n        const response = await window.fetch(serverPath + `/metadata?uid=${user.uid}&token=${token}`);\n        const data = await response.json();\n        this.setState({\n          isSubscriber: data.isSubscriber\n        });\n      }\n    };\n\n    this.loadYouTube = () => {\n      // This code loads the IFrame Player API code asynchronously.\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      var firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n      window.onYouTubeIframeAPIReady = () => {\n        // Note: this fails silently if the element is not available\n        const ytPlayer = new window.YT.Player('leftYt', {\n          events: {\n            onReady: () => {\n              this.watchPartyYTPlayer = ytPlayer;\n              this.setState({\n                isYouTubeReady: true,\n                loading: false\n              }); // We might have failed to play YT originally, ask for the current video again\n\n              if (this.isYouTube()) {\n                this.socket.emit('CMD:askHost');\n              }\n            },\n            onStateChange: e => {\n              var _window$YT, _window$YT$PlayerStat, _window$YT2, _window$YT2$PlayerSta, _window$YT3, _window$YT3$PlayerSta;\n\n              if (getMediaType(this.state.currentMedia) === 'youtube' && e.data === ((_window$YT = window.YT) === null || _window$YT === void 0 ? void 0 : (_window$YT$PlayerStat = _window$YT.PlayerState) === null || _window$YT$PlayerStat === void 0 ? void 0 : _window$YT$PlayerStat.CUED)) {\n                this.setState({\n                  loading: false\n                });\n              } // console.log(this.ytDebounce, e.data, this.watchPartyYTPlayer?.getVideoUrl());\n\n\n              if (this.ytDebounce && (e.data === ((_window$YT2 = window.YT) === null || _window$YT2 === void 0 ? void 0 : (_window$YT2$PlayerSta = _window$YT2.PlayerState) === null || _window$YT2$PlayerSta === void 0 ? void 0 : _window$YT2$PlayerSta.PLAYING) && this.state.currentMediaPaused || e.data === ((_window$YT3 = window.YT) === null || _window$YT3 === void 0 ? void 0 : (_window$YT3$PlayerSta = _window$YT3.PlayerState) === null || _window$YT3$PlayerSta === void 0 ? void 0 : _window$YT3$PlayerSta.PAUSED) && !this.state.currentMediaPaused)) {\n                var _window$YT4, _window$YT4$PlayerSta;\n\n                this.ytDebounce = false;\n\n                if (e.data === ((_window$YT4 = window.YT) === null || _window$YT4 === void 0 ? void 0 : (_window$YT4$PlayerSta = _window$YT4.PlayerState) === null || _window$YT4$PlayerSta === void 0 ? void 0 : _window$YT4$PlayerSta.PLAYING)) {\n                  this.socket.emit('CMD:play');\n                  this.doPlay();\n                } else {\n                  this.socket.emit('CMD:pause');\n                  this.doPause();\n                }\n\n                window.setTimeout(() => this.ytDebounce = true, 500);\n              }\n            }\n          }\n        });\n      };\n    };\n\n    this.init = async () => {\n      // Load room ID from url\n      let roomId = '/default';\n      let query = window.location.hash.substring(1);\n\n      if (query) {\n        roomId = '/' + query;\n      } // if a vanity name, resolve the url to a room id\n\n\n      if (this.props.vanity) {\n        try {\n          const response = await axios.get(serverPath + '/resolveRoom/' + this.props.vanity);\n\n          if (response.data.roomId) {\n            roomId = response.data.roomId;\n          } else {\n            throw new Error('failed to resolve room name');\n          }\n        } catch (e) {\n          console.error(e);\n          this.setState({\n            error: \"There's no room with this name.\"\n          });\n          return;\n        }\n      }\n\n      this.setState({\n        roomId\n      });\n      this.join(roomId);\n    };\n\n    this.join = async roomId => {\n      let password = '';\n\n      try {\n        const savedPasswordsString = window.localStorage.getItem('watchparty-passwords');\n        const savedPasswords = JSON.parse(savedPasswordsString || '{}');\n        this.setState({\n          savedPasswords\n        });\n        password = savedPasswords[roomId] || '';\n      } catch (e) {\n        console.warn('[ALERT] Could not parse saved passwords');\n      }\n\n      const socket = io.connect(serverPath + roomId, {\n        transports: ['websocket'],\n        query: {\n          clientId: getAndSaveClientId(),\n          password\n        }\n      });\n      this.socket = socket;\n      socket.on('connect', async () => {\n        const canAutoplay = await testAutoplay();\n        this.setState({\n          isAutoPlayable: canAutoplay\n        });\n        this.setState({\n          state: 'connected'\n        }); // Load username from localstorage\n\n        let userName = window.localStorage.getItem('watchparty-username');\n        this.updateName(null, {\n          value: userName || generateName()\n        }); // if (!this.state.user && firebaseConfig) {\n        //   await firebase.auth().signInAnonymously();\n        // }\n\n        this.loadSignInData();\n      });\n      socket.on('error', err => {\n        console.error(err);\n\n        if (err === 'Invalid namespace') {\n          this.setState({\n            error: \"There's no room with this name.\"\n          });\n        } else if (err === 'not authorized') {\n          this.setState({\n            isErrorAuth: true\n          });\n        } else {\n          this.setState({\n            error: 'An error occurred.'\n          });\n        }\n      });\n      socket.on('errorMessage', err => {\n        this.setState({\n          errorMessage: err\n        });\n        setTimeout(() => {\n          this.setState({\n            errorMessage: ''\n          });\n        }, 3000);\n      });\n      socket.on('successMessage', success => {\n        this.setState({\n          successMessage: success\n        });\n        setTimeout(() => {\n          this.setState({\n            successMessage: ''\n          });\n        }, 3000);\n      });\n      socket.on('REC:play', () => {\n        this.doPlay();\n      });\n      socket.on('REC:pause', () => {\n        this.doPause();\n      });\n      socket.on('REC:seek', data => {\n        this.doSeek(data);\n      });\n      socket.on('REC:subtitle', data => {\n        this.setState({\n          currentSubtitle: serverPath + '/subtitle/' + data\n        }, () => {\n          if (!this.isSubtitled()) {\n            this.toggleSubtitle();\n          }\n        });\n      });\n      socket.on('REC:changeController', data => {\n        this.setState({\n          controller: data\n        });\n      });\n      socket.on('REC:host', data => {\n        let currentMedia = data.video || '';\n\n        if (this.isScreenShare() && !currentMedia.startsWith('screenshare://')) {\n          this.stopScreenShare();\n        }\n\n        if (this.isFileShare() && !currentMedia.startsWith('fileshare://')) {\n          this.stopScreenShare();\n        }\n\n        if (this.isScreenShare() && currentMedia.startsWith('screenshare://')) {\n          // Ignore, it's probably a reconnection\n          return;\n        }\n\n        if (this.isFileShare() && currentMedia.startsWith('fileshare://')) {\n          // Ignore, it's probably a reconnection\n          return;\n        }\n\n        if (this.isVBrowser() && !currentMedia.startsWith('vbrowser://')) {\n          this.stopVBrowser();\n        }\n\n        this.setState({\n          currentMedia,\n          currentMediaPaused: data.paused,\n          currentSubtitle: Boolean(data.subtitle) ? serverPath + '/subtitle/' + data.subtitle : '',\n          loading: Boolean(data.video),\n          nonPlayableMedia: false,\n          isVBrowserLarge: data.isVBrowserLarge,\n          vBrowserResolution: data.isVBrowserLarge ? '1920x1080@30' : '1280x720@30',\n          controller: data.controller\n        }, () => {\n          var _this$watchPartyYTPla;\n\n          if (this.state.isScreenSharingFile || this.isVBrowser() && this.getVBrowserHost()) {\n            console.log('skipping REC:host video since fileshare is using leftVideo or this is a vbrowser');\n            this.setLoadingFalse();\n            return;\n          } // Stop all players\n\n\n          const leftVideo = document.getElementById('leftVideo');\n          leftVideo === null || leftVideo === void 0 ? void 0 : leftVideo.pause();\n          (_this$watchPartyYTPla = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla === void 0 ? void 0 : _this$watchPartyYTPla.stopVideo(); // If we can't autoplay, start muted\n\n          if (!this.state.isAutoPlayable) {\n            this.setMute(true);\n          }\n\n          if (this.isYouTube() && !this.watchPartyYTPlayer) {\n            console.log('YT player not ready, onReady callback will retry when it is');\n          } else if (this.isVBrowser()) {\n            console.log('not playing video as this is a vbrowser:// placeholder');\n          } else {\n            // Start this video\n            this.doSrc(data.video, data.videoTS);\n\n            if (!data.paused) {\n              this.doPlay();\n            }\n\n            if (data.subtitle) {\n              if (!this.isSubtitled()) {\n                this.toggleSubtitle();\n              }\n            } // One time, when we're ready to play\n\n\n            leftVideo === null || leftVideo === void 0 ? void 0 : leftVideo.addEventListener('canplay', () => {\n              this.setLoadingFalse();\n              this.jumpToLeader();\n            }, {\n              once: true\n            }); // Progress updater\n\n            window.clearInterval(this.progressUpdater);\n            this.setState({\n              downloaded: 0,\n              total: 0,\n              speed: 0\n            });\n\n            if (currentMedia.includes('/stream?torrent=magnet')) {\n              this.progressUpdater = window.setInterval(async () => {\n                const response = await window.fetch(currentMedia.replace('/stream', '/progress'));\n                const data = await response.json();\n                this.setState({\n                  downloaded: data.downloaded,\n                  total: data.total,\n                  speed: data.speed,\n                  connections: data.connections\n                });\n              }, 1000);\n            }\n          }\n        });\n      });\n      socket.on('REC:chat', data => {\n        if (!getCurrentSettings().disableChatSound && document.visibilityState && document.visibilityState !== 'visible') {\n          new Audio('/clearly.mp3').play();\n        }\n\n        this.state.chat.push(data);\n        this.setState({\n          chat: this.state.chat,\n          scrollTimestamp: Number(new Date())\n        });\n      });\n      socket.on('REC:tsMap', data => {\n        this.setState({\n          tsMap: data\n        });\n        this.syncSubtitle();\n      });\n      socket.on('REC:nameMap', data => {\n        this.setState({\n          nameMap: data\n        });\n      });\n      socket.on('REC:pictureMap', data => {\n        this.setState({\n          pictureMap: data\n        });\n      });\n      socket.on('REC:lock', data => {\n        this.setState({\n          roomLock: data\n        });\n      });\n      socket.on('roster', data => {\n        this.setState({\n          participants: data,\n          rosterUpdateTS: Number(new Date())\n        }, () => {\n          this.updateScreenShare();\n        });\n      });\n      socket.on('chatinit', data => {\n        this.setState({\n          chat: data,\n          scrollTimestamp: Number(new Date())\n        });\n      });\n      socket.on('signalSS', async data => {\n        // Handle messages received from signaling server\n        const msg = data.msg;\n        const from = data.from; // Determine whether the message came from the sharer or the sharee\n\n        const pc = data.sharer ? this.screenSharePC : this.screenHostPC[from];\n\n        if (msg.ice !== undefined) {\n          pc.addIceCandidate(new RTCIceCandidate(msg.ice));\n        } else if (msg.sdp && msg.sdp.type === 'offer') {\n          // console.log('offer');\n          await pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));\n          const answer = await pc.createAnswer();\n          await pc.setLocalDescription(answer);\n          this.sendSignalSS(from, {\n            sdp: pc.localDescription\n          }, !data.sharer);\n        } else if (msg.sdp && msg.sdp.type === 'answer') {\n          pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));\n        }\n      });\n      window.setInterval(() => {\n        if (this.state.currentMedia) {\n          this.socket.emit('CMD:ts', this.getCurrentTime());\n        }\n      }, 1000);\n    };\n\n    this.setupFileShare = async () => {\n      const files = await openFileSelector();\n\n      if (!files) {\n        return;\n      }\n\n      const file = files[0];\n      const leftVideo = document.getElementById('leftVideo');\n      leftVideo.srcObject = null;\n      leftVideo.src = URL.createObjectURL(file);\n      leftVideo.play(); //@ts-ignore\n\n      const stream = leftVideo.captureStream(); // Can render video to a canvas to resize it, reduce size\n\n      stream.onaddtrack = () => {\n        console.log(stream, stream.getVideoTracks(), stream.getAudioTracks());\n\n        if (!this.screenShareStream && stream.getVideoTracks().length && stream.getAudioTracks().length) {\n          stream.getVideoTracks()[0].onended = this.stopScreenShare;\n          this.screenShareStream = stream;\n          this.socket.emit('CMD:joinScreenShare', {\n            file: true\n          });\n          this.setState({\n            isScreenSharing: true,\n            isScreenSharingFile: true\n          });\n          stream.onaddtrack = undefined;\n        }\n      };\n    };\n\n    this.setupScreenShare = async () => {\n      //@ts-ignore\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: {\n          cursor: 'never',\n          height: 720,\n          logicalSurface: true\n        },\n        audio: true\n      });\n      stream.getVideoTracks()[0].onended = this.stopScreenShare;\n      this.screenShareStream = stream;\n      this.socket.emit('CMD:joinScreenShare');\n      this.setState({\n        isScreenSharing: true\n      });\n    };\n\n    this.stopScreenShare = async () => {\n      this.screenShareStream && this.screenShareStream.getTracks().forEach(track => {\n        track.stop();\n      });\n      this.screenShareStream = undefined;\n\n      if (this.screenSharePC) {\n        this.screenSharePC.close();\n        this.screenSharePC = undefined;\n      }\n\n      Object.values(this.screenHostPC).forEach(pc => {\n        pc.close();\n      });\n      this.screenHostPC = {};\n\n      if (this.state.isScreenSharing) {\n        this.socket.emit('CMD:leaveScreenShare');\n      }\n\n      this.setState({\n        isScreenSharing: false,\n        isScreenSharingFile: false\n      });\n    };\n\n    this.updateScreenShare = async () => {\n      if (!this.isScreenShare() && !this.isFileShare()) {\n        return;\n      } // TODO teardown for those who leave\n\n\n      const sharer = this.state.participants.find(p => p.isScreenShare);\n\n      if (sharer && sharer.id === this.socket.id) {\n        // We're the sharer, create a connection to each other member\n        this.state.participants.forEach(user => {\n          const id = user.id;\n\n          if (id === this.socket.id && this.state.isScreenSharingFile) {\n            // Don't set up a connection to ourselves if sharing file\n            return;\n          }\n\n          if (!this.screenHostPC[id]) {\n            // Set up the RTCPeerConnection for sharing media to each member\n            const pc = new RTCPeerConnection({\n              iceServers: iceServers()\n            });\n            this.screenHostPC[id] = pc; //@ts-ignore\n\n            pc.addStream(this.screenShareStream);\n\n            pc.onicecandidate = event => {\n              // We generated an ICE candidate, send it to peer\n              if (event.candidate) {\n                this.sendSignalSS(id, {\n                  ice: event.candidate\n                }, true);\n              }\n            };\n\n            pc.onnegotiationneeded = async () => {\n              // Start connection for peer's video\n              const offer = await pc.createOffer();\n              await pc.setLocalDescription(offer);\n              this.sendSignalSS(id, {\n                sdp: pc.localDescription\n              }, true);\n            };\n          }\n        });\n      } // We're a watcher, establish connection to sharer\n      // If screensharing, sharer also does this\n      // If filesharing, sharer does not do this since we use leftVideo\n\n\n      if (sharer && !this.screenSharePC && !this.state.isScreenSharingFile) {\n        const pc = new RTCPeerConnection({\n          iceServers: iceServers()\n        });\n        this.screenSharePC = pc;\n\n        pc.onicecandidate = event => {\n          // We generated an ICE candidate, send it to peer\n          if (event.candidate) {\n            this.sendSignalSS(sharer.id, {\n              ice: event.candidate\n            });\n          }\n        }; //@ts-ignore\n\n\n        pc.onaddstream = event => {\n          console.log('stream from webrtc peer'); // Mount the stream from peer\n\n          const stream = event.stream; // console.log(stream);\n\n          const leftVideo = document.getElementById('leftVideo');\n\n          if (leftVideo) {\n            leftVideo.src = '';\n            leftVideo.srcObject = stream;\n\n            if (!this.state.isAutoPlayable) {\n              this.setMute(true);\n            }\n\n            leftVideo.play();\n          }\n        };\n      }\n    };\n\n    this.setupVBrowser = async (rcToken, options) => {\n      // user.uid is the public user identifier\n      // user.getIdToken() is the secret access token we can send to the server to prove identity\n      const user = this.state.user;\n      const uid = user === null || user === void 0 ? void 0 : user.uid;\n      const token = await (user === null || user === void 0 ? void 0 : user.getIdToken());\n      this.socket.emit('CMD:startVBrowser', {\n        options,\n        uid,\n        token,\n        rcToken\n      });\n    };\n\n    this.stopVBrowser = async () => {\n      this.socket.emit('CMD:stopVBrowser');\n    };\n\n    this.changeController = async (e, data) => {\n      // console.log(data);\n      this.socket.emit('CMD:changeController', data.value);\n    };\n\n    this.setSubtitle = async () => {\n      const files = await openFileSelector('.srt');\n\n      if (!files) {\n        return;\n      }\n\n      const file = files[0];\n      const reader = new FileReader();\n      reader.addEventListener('load', event => {\n        var _event$target;\n\n        const subData = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n        this.socket.emit('CMD:subtitle', subData);\n      });\n      reader.readAsText(file);\n    };\n\n    this.sendSignalSS = async (to, data, sharer) => {\n      // console.log('sendSS', to, data);\n      this.socket.emit('signalSS', {\n        to,\n        msg: data,\n        sharer\n      });\n    };\n\n    this.isYouTube = () => {\n      return getMediaType(this.state.currentMedia) === 'youtube';\n    };\n\n    this.isVideo = () => {\n      return getMediaType(this.state.currentMedia) === 'video';\n    };\n\n    this.isScreenShare = () => {\n      return this.state.currentMedia.startsWith('screenshare://');\n    };\n\n    this.isFileShare = () => {\n      return this.state.currentMedia.startsWith('fileshare://');\n    };\n\n    this.isVBrowser = () => {\n      return this.state.currentMedia.startsWith('vbrowser://');\n    };\n\n    this.isHttp = () => {\n      return this.state.currentMedia.startsWith('http');\n    };\n\n    this.getVBrowserPass = () => {\n      return this.state.currentMedia.replace('vbrowser://', '').split('@')[0];\n    };\n\n    this.getVBrowserHost = () => {\n      return this.state.currentMedia.replace('vbrowser://', '').split('@')[1];\n    };\n\n    this.getCurrentTime = () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        return leftVideo === null || leftVideo === void 0 ? void 0 : leftVideo.currentTime;\n      }\n\n      if (this.isYouTube()) {\n        var _this$watchPartyYTPla2;\n\n        return (_this$watchPartyYTPla2 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla2 === void 0 ? void 0 : _this$watchPartyYTPla2.getCurrentTime();\n      }\n    };\n\n    this.getDuration = () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        return leftVideo.duration;\n      }\n\n      if (this.isYouTube()) {\n        var _this$watchPartyYTPla3;\n\n        return (_this$watchPartyYTPla3 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla3 === void 0 ? void 0 : _this$watchPartyYTPla3.getDuration();\n      }\n\n      return 0;\n    };\n\n    this.isPaused = () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        return leftVideo.paused || leftVideo.ended;\n      }\n\n      if (this.isYouTube()) {\n        var _this$watchPartyYTPla4, _window$YT5, _window$YT5$PlayerSta, _this$watchPartyYTPla5, _window$YT6, _window$YT6$PlayerSta;\n\n        return ((_this$watchPartyYTPla4 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla4 === void 0 ? void 0 : _this$watchPartyYTPla4.getPlayerState()) === ((_window$YT5 = window.YT) === null || _window$YT5 === void 0 ? void 0 : (_window$YT5$PlayerSta = _window$YT5.PlayerState) === null || _window$YT5$PlayerSta === void 0 ? void 0 : _window$YT5$PlayerSta.PAUSED) || ((_this$watchPartyYTPla5 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla5 === void 0 ? void 0 : _this$watchPartyYTPla5.getPlayerState()) === ((_window$YT6 = window.YT) === null || _window$YT6 === void 0 ? void 0 : (_window$YT6$PlayerSta = _window$YT6.PlayerState) === null || _window$YT6$PlayerSta === void 0 ? void 0 : _window$YT6$PlayerSta.ENDED);\n      }\n\n      return false;\n    };\n\n    this.isMuted = () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        return leftVideo === null || leftVideo === void 0 ? void 0 : leftVideo.muted;\n      }\n\n      if (this.isYouTube()) {\n        var _this$watchPartyYTPla6;\n\n        return (_this$watchPartyYTPla6 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla6 === void 0 ? void 0 : _this$watchPartyYTPla6.isMuted();\n      }\n\n      return false;\n    };\n\n    this.isSubtitled = () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        return leftVideo.textTracks[0] && leftVideo.textTracks[0].mode === 'showing';\n      }\n\n      if (this.isYouTube()) {\n        try {\n          var _this$watchPartyYTPla7;\n\n          const current = (_this$watchPartyYTPla7 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla7 === void 0 ? void 0 : _this$watchPartyYTPla7.getOption('captions', 'track');\n          return Boolean(current && current.languageCode);\n        } catch (e) {\n          console.warn(e);\n          return false;\n        }\n      }\n\n      return false;\n    };\n\n    this.jumpToLeader = () => {\n      // Jump to the leader's position\n      const maxTS = this.getLeaderTime();\n\n      if (maxTS > 0) {\n        console.log('jump to leader at ', maxTS);\n        this.doSeek(maxTS);\n      }\n    };\n\n    this.doSrc = async (src, time) => {\n      console.log('doSrc', src, time);\n\n      if (this.isScreenShare() || this.isFileShare() || this.isVBrowser()) {\n        // No-op as we'll set video when WebRTC completes\n        return;\n      }\n\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n\n        if (leftVideo) {\n          leftVideo.srcObject = null;\n          leftVideo.src = src;\n          leftVideo.currentTime = time; // Clear subtitles\n\n          leftVideo.innerHTML = '';\n        }\n      }\n\n      if (this.isYouTube()) {\n        var _this$watchPartyYTPla8;\n\n        let url = new window.URL(src); // Standard link https://www.youtube.com/watch?v=ID\n\n        let videoId = querystring.parse(url.search.substring(1))['v']; // Link shortener https://youtu.be/ID\n\n        let altVideoId = src.split('/').slice(-1)[0];\n        (_this$watchPartyYTPla8 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla8 === void 0 ? void 0 : _this$watchPartyYTPla8.cueVideoById(videoId || altVideoId, time);\n      }\n    };\n\n    this.doPlay = async () => {\n      this.setState({\n        currentMediaPaused: false\n      }, async () => {\n        if (this.isVideo()) {\n          const leftVideo = document.getElementById('leftVideo');\n\n          try {\n            await (leftVideo === null || leftVideo === void 0 ? void 0 : leftVideo.play());\n          } catch (e) {\n            // console.warn(e);\n            console.warn(e.name);\n\n            if (e.name === 'NotSupportedError') {\n              this.setState({\n                loading: false,\n                nonPlayableMedia: true\n              });\n            }\n          }\n        }\n\n        if (this.isYouTube()) {\n          var _this$watchPartyYTPla9;\n\n          console.log('play yt');\n          (_this$watchPartyYTPla9 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla9 === void 0 ? void 0 : _this$watchPartyYTPla9.playVideo();\n        }\n      });\n    };\n\n    this.doPause = () => {\n      this.setState({\n        currentMediaPaused: true\n      }, async () => {\n        if (this.isVideo()) {\n          const leftVideo = document.getElementById('leftVideo');\n          leftVideo.pause();\n        }\n\n        if (this.isYouTube()) {\n          var _this$watchPartyYTPla10;\n\n          console.log('pause');\n          (_this$watchPartyYTPla10 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla10 === void 0 ? void 0 : _this$watchPartyYTPla10.pauseVideo();\n        }\n      });\n    };\n\n    this.doSeek = time => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        leftVideo.currentTime = time;\n      }\n\n      if (this.isYouTube()) {\n        var _this$watchPartyYTPla11;\n\n        (_this$watchPartyYTPla11 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla11 === void 0 ? void 0 : _this$watchPartyYTPla11.seekTo(time, true);\n      }\n    };\n\n    this.togglePlay = () => {\n      let shouldPlay = true;\n\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        shouldPlay = leftVideo.paused || leftVideo.ended;\n      } else if (this.isYouTube()) {\n        var _this$watchPartyYTPla12, _window$YT7;\n\n        shouldPlay = ((_this$watchPartyYTPla12 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla12 === void 0 ? void 0 : _this$watchPartyYTPla12.getPlayerState()) === ((_window$YT7 = window.YT) === null || _window$YT7 === void 0 ? void 0 : _window$YT7.PlayerState.PAUSED) || this.getCurrentTime() === this.getDuration();\n      }\n\n      if (shouldPlay) {\n        this.socket.emit('CMD:play');\n        this.doPlay();\n      } else {\n        this.socket.emit('CMD:pause');\n        this.doPause();\n      }\n    };\n\n    this.onSeek = (e, time) => {\n      let target = time;\n\n      if (e) {\n        const rect = e.target.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const max = rect.width;\n        target = x / max * this.getDuration();\n      }\n\n      target = Math.max(target, 0);\n      this.doSeek(target);\n      this.socket.emit('CMD:seek', target);\n    };\n\n    this.onVideoKeydown = e => {\n      if (e.key === ' ') {\n        e.preventDefault();\n        this.togglePlay();\n      } else if (e.key === 'ArrowRight') {\n        this.onSeek(null, this.getCurrentTime() + 10);\n      } else if (e.key === 'ArrowLeft') {\n        this.onSeek(null, this.getCurrentTime() - 10);\n      } else if (e.key === 'c') {\n        this.toggleSubtitle();\n      } else if (e.key === 't') {\n        this.fullScreen(false);\n      } else if (e.key === 'f') {\n        this.fullScreen(true);\n      } else if (e.key === 'm') {\n        this.toggleMute();\n      }\n    };\n\n    this.fullScreen = async bVideoOnly => {\n      let container = document.getElementById('fullScreenContainer');\n\n      if (bVideoOnly || isMobile()) {\n        container = document.getElementById(this.isYouTube() ? 'leftYt' : 'leftVideo');\n      }\n\n      if (!document.fullscreenElement) {\n        await container.requestFullscreen();\n        return;\n      }\n\n      const bChangeElements = document.fullscreenElement !== container;\n      await document.exitFullscreen();\n\n      if (bChangeElements) {\n        await container.requestFullscreen();\n      }\n    };\n\n    this.toggleMute = () => {\n      this.setMute(!this.isMuted());\n    };\n\n    this.setMute = muted => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n\n        if (leftVideo) {\n          leftVideo.muted = muted;\n        }\n      }\n\n      if (this.isYouTube()) {\n        if (muted) {\n          var _this$watchPartyYTPla13;\n\n          (_this$watchPartyYTPla13 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla13 === void 0 ? void 0 : _this$watchPartyYTPla13.mute();\n        } else {\n          var _this$watchPartyYTPla14;\n\n          (_this$watchPartyYTPla14 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla14 === void 0 ? void 0 : _this$watchPartyYTPla14.unMute();\n        }\n      }\n    };\n\n    this.setVolume = volume => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        leftVideo.volume = volume;\n      }\n\n      if (this.isYouTube()) {\n        var _this$watchPartyYTPla15;\n\n        (_this$watchPartyYTPla15 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla15 === void 0 ? void 0 : _this$watchPartyYTPla15.setVolume(volume * 100);\n      }\n    };\n\n    this.getVolume = () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n        return leftVideo.volume;\n      }\n\n      if (this.isYouTube()) {\n        var _this$watchPartyYTPla16;\n\n        const volume = (_this$watchPartyYTPla16 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla16 === void 0 ? void 0 : _this$watchPartyYTPla16.getVolume();\n        return volume / 100;\n      }\n    };\n\n    this.loadSubtitles = async () => {\n      const leftVideo = document.getElementById('leftVideo'); // Clear subtitles\n\n      leftVideo.innerHTML = '';\n      let subtitleSrc = '';\n      const src = this.state.currentMedia;\n\n      if (this.state.currentSubtitle) {\n        subtitleSrc = this.state.currentSubtitle;\n      } else if (src.includes('/stream?torrent=magnet')) {\n        subtitleSrc = src.replace('/stream', '/subtitles2');\n      } else if (src.startsWith('http')) {\n        const subtitlePath = src.slice(0, src.lastIndexOf('/') + 1); // Expect subtitle name to be file name + .srt\n\n        subtitleSrc = subtitlePath + 'subtitles/' + this.getFileName(src) + '.srt';\n      }\n\n      if (subtitleSrc) {\n        const response = await window.fetch(subtitleSrc);\n        const buffer = await response.arrayBuffer();\n        const vttConverter = new VTTConverter(new Blob([buffer]));\n        const url = await vttConverter.getURL();\n        const track = document.createElement('track');\n        track.kind = 'captions';\n        track.label = 'English';\n        track.srclang = 'en';\n        track.src = url;\n        leftVideo.appendChild(track);\n        leftVideo.textTracks[0].mode = 'showing';\n      }\n    };\n\n    this.syncSubtitle = () => {\n      const sharer = this.state.participants.find(p => p.isScreenShare);\n\n      if (!sharer || sharer.id === this.socket.id) {\n        return;\n      } // When sharing, our timestamp doesn't match the subtitles so adjust them\n      // For each cue, subtract the videoTS of the sharer, then add our own\n\n\n      const leftVideo = document.getElementById('leftVideo');\n      const track = leftVideo === null || leftVideo === void 0 ? void 0 : leftVideo.textTracks[0];\n      let offset = leftVideo.currentTime - this.state.tsMap[sharer.id];\n\n      if (track && offset && track.cues) {\n        for (let i = 0; i < track.cues.length; i++) {\n          let cue = track.cues[i]; // console.log(cue.text, offset, (cue as any).origStart, (cue as any).origEnd);\n\n          if (!cue.origStart) {\n            cue.origStart = cue.startTime;\n            cue.origEnd = cue.endTime;\n          }\n\n          cue.startTime = cue.origStart + offset;\n          cue.endTime = cue.origEnd + offset;\n        }\n      }\n    };\n\n    this.toggleSubtitle = () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById('leftVideo');\n\n        if (this.isSubtitled()) {\n          leftVideo.innerHTML = '';\n        } else {\n          this.loadSubtitles();\n        }\n      }\n\n      if (this.isYouTube()) {\n        const isSubtitled = this.isSubtitled(); // console.log(isSubtitled);\n\n        if (isSubtitled) {\n          var _this$watchPartyYTPla17;\n\n          // BUG this doesn't actually set the value so subtitles can't be toggled off\n          (_this$watchPartyYTPla17 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla17 === void 0 ? void 0 : _this$watchPartyYTPla17.setOption('captions', 'track', {});\n        } else {\n          var _this$watchPartyYTPla18, _this$watchPartyYTPla19, _this$watchPartyYTPla20;\n\n          (_this$watchPartyYTPla18 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla18 === void 0 ? void 0 : _this$watchPartyYTPla18.setOption('captions', 'reload', true);\n          const tracks = (_this$watchPartyYTPla19 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla19 === void 0 ? void 0 : _this$watchPartyYTPla19.getOption('captions', 'tracklist');\n          (_this$watchPartyYTPla20 = this.watchPartyYTPlayer) === null || _this$watchPartyYTPla20 === void 0 ? void 0 : _this$watchPartyYTPla20.setOption('captions', 'track', tracks[0]);\n        }\n      }\n    };\n\n    this.setMedia = (e, data) => {\n      this.socket.emit('CMD:host', data.value);\n    };\n\n    this.launchMultiSelect = data => {\n      this.setState({\n        multiStreamSelection: data\n      });\n    };\n\n    this.resetMultiSelect = () => {\n      this.setState({\n        multiStreamSelection: undefined\n      });\n    };\n\n    this.updateName = (e, data) => {\n      this.setState({\n        myName: data.value\n      });\n      this.socket.emit('CMD:name', data.value);\n      window.localStorage.setItem('watchparty-username', data.value);\n    };\n\n    this.updatePicture = url => {\n      this.setState({\n        myPicture: url\n      });\n      this.socket.emit('CMD:picture', url);\n    };\n\n    this.updateUid = async user => {\n      const uid = user.uid;\n      const token = await user.getIdToken();\n      this.socket.emit('CMD:uid', {\n        uid,\n        token\n      });\n    };\n\n    this.getMediaDisplayName = input => {\n      if (!input) {\n        return '';\n      } // Show the whole URL for youtube\n\n\n      if (getMediaType(input) === 'youtube') {\n        return input;\n      }\n\n      if (input.startsWith('screenshare://')) {\n        let id = input.slice('screenshare://'.length);\n        return this.state.nameMap[id] + \"'s screen\";\n      }\n\n      if (input.startsWith('fileshare://')) {\n        let id = input.slice('fileshare://'.length);\n        return this.state.nameMap[id] + \"'s file\";\n      }\n\n      if (input.startsWith('vbrowser://')) {\n        return 'Virtual Browser' + (this.state.isVBrowserLarge ? '+' : '');\n      }\n\n      if (input.includes('/stream?torrent=magnet')) {\n        const search = new URL(input).search;\n        const magnetUrl = querystring.parse(search.substring(1)).torrent;\n        const magnetParsed = magnet.decode(magnetUrl);\n        return magnetParsed.name;\n      } // Get the filename out of the URL\n\n\n      return input;\n    };\n\n    this.getFileName = input => {\n      return input.split('/').slice(-1)[0];\n    };\n\n    this.setLoadingFalse = () => {\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.onManage = async () => {\n      var _this$state$user, _this$state$user2;\n\n      const resp = await window.fetch(serverPath + '/manageSub', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uid: (_this$state$user = this.state.user) === null || _this$state$user === void 0 ? void 0 : _this$state$user.uid,\n          token: await ((_this$state$user2 = this.state.user) === null || _this$state$user2 === void 0 ? void 0 : _this$state$user2.getIdToken()),\n          return_url: window.location.href\n        })\n      });\n      const session = await resp.json();\n      console.log(session);\n      window.location.assign(session.url);\n    };\n\n    this.setRoomLock = async locked => {\n      var _this$state$user3, _this$state$user4;\n\n      const uid = (_this$state$user3 = this.state.user) === null || _this$state$user3 === void 0 ? void 0 : _this$state$user3.uid;\n      const token = await ((_this$state$user4 = this.state.user) === null || _this$state$user4 === void 0 ? void 0 : _this$state$user4.getIdToken());\n      this.socket.emit('CMD:lock', {\n        uid,\n        token,\n        locked\n      });\n    };\n\n    this.haveLock = () => {\n      var _this$state$user5;\n\n      if (!this.state.roomLock) {\n        return true;\n      }\n\n      return ((_this$state$user5 = this.state.user) === null || _this$state$user5 === void 0 ? void 0 : _this$state$user5.uid) === this.state.roomLock;\n    };\n\n    this.getLeaderTime = () => {\n      return Math.max(...Object.values(this.state.tsMap));\n    };\n  }\n\n  async componentDidMount() {\n    document.onfullscreenchange = () => {\n      this.setState({\n        fullScreen: Boolean(document.fullscreenElement)\n      });\n    }; // Send heartbeat to the server\n\n\n    window.setInterval(() => {\n      window.fetch(serverPath + '/ping');\n    }, 10 * 60 * 1000);\n\n    if (firebaseConfig) {\n      firebase.auth().onAuthStateChanged(async user => {\n        if (user) {\n          // console.log(user);\n          this.setState({\n            user\n          }, async () => {\n            this.loadSignInData();\n          });\n        }\n      });\n    }\n\n    this.loadSettings();\n    this.loadYouTube();\n    this.init();\n  }\n\n  render() {\n    var _this$socket;\n\n    const sharer = this.state.participants.find(p => p.isScreenShare);\n    const controls = /*#__PURE__*/React.createElement(Controls, {\n      key: this.state.controlsTimestamp,\n      togglePlay: this.togglePlay,\n      onSeek: this.onSeek,\n      fullScreen: this.fullScreen,\n      toggleMute: this.toggleMute,\n      toggleSubtitle: this.toggleSubtitle,\n      setVolume: this.setVolume,\n      getVolume: this.getVolume,\n      jumpToLeader: this.jumpToLeader,\n      paused: this.isPaused(),\n      muted: this.isMuted(),\n      subtitled: this.isSubtitled(),\n      currentTime: this.getCurrentTime(),\n      duration: this.getDuration(),\n      disabled: !this.haveLock(),\n      leaderTime: this.isHttp() ? this.getLeaderTime() : undefined,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 7\n      }\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248,\n        columnNumber: 7\n      }\n    }, this.state.multiStreamSelection && /*#__PURE__*/React.createElement(MultiStreamModal, {\n      streams: this.state.multiStreamSelection,\n      setMedia: this.setMedia,\n      resetMultiSelect: this.resetMultiSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1250,\n        columnNumber: 11\n      }\n    }), this.state.isSubscribeModalOpen && /*#__PURE__*/React.createElement(SubscribeModal, {\n      user: this.state.user,\n      isSubscriber: this.state.isSubscriber,\n      closeSubscribe: () => this.setState({\n        isSubscribeModalOpen: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1257,\n        columnNumber: 11\n      }\n    }), this.state.isVBrowserModalOpen && /*#__PURE__*/React.createElement(VBrowserModal, {\n      isSubscriber: this.state.isSubscriber,\n      closeModal: () => this.setState({\n        isVBrowserModalOpen: false\n      }),\n      openSubscribe: () => this.setState({\n        isSubscribeModalOpen: true\n      }),\n      startVBrowser: this.setupVBrowser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266,\n        columnNumber: 11\n      }\n    }), this.state.error && /*#__PURE__*/React.createElement(ErrorModal, {\n      error: this.state.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1273,\n        columnNumber: 30\n      }\n    }), this.state.isErrorAuth && /*#__PURE__*/React.createElement(PasswordModal, {\n      savedPasswords: this.state.savedPasswords,\n      roomId: this.state.roomId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275,\n        columnNumber: 11\n      }\n    }), this.state.errorMessage && /*#__PURE__*/React.createElement(Message, {\n      negative: true,\n      header: \"Error\",\n      content: this.state.errorMessage,\n      style: {\n        position: 'fixed',\n        bottom: '10px',\n        right: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281,\n        columnNumber: 11\n      }\n    }), this.state.successMessage && /*#__PURE__*/React.createElement(Message, {\n      positive: true,\n      header: \"Success\",\n      content: this.state.successMessage,\n      style: {\n        position: 'fixed',\n        bottom: '10px',\n        right: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289,\n        columnNumber: 11\n      }\n    }), !this.state.error && !this.state.isAutoPlayable && /*#__PURE__*/React.createElement(Modal, {\n      inverted: true,\n      basic: true,\n      open: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1298,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      primary: true,\n      size: \"huge\",\n      onClick: () => {\n        this.setState({\n          isAutoPlayable: true\n        });\n        this.setMute(false);\n      },\n      icon: true,\n      labelPosition: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"sign-in\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1309,\n        columnNumber: 17\n      }\n    }), \"Join Party\"))), /*#__PURE__*/React.createElement(TopBar, {\n      user: this.state.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1315,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      stackable: true,\n      celled: \"internally\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1318,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 12,\n      className: \"fullHeightColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1319,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ComboBox, {\n      setMedia: this.setMedia,\n      currentMedia: this.state.currentMedia,\n      getMediaDisplayName: this.getMediaDisplayName,\n      launchMultiSelect: this.launchMultiSelect,\n      streamPath: this.state.settings.streamPath,\n      mediaPath: this.state.settings.mediaPath,\n      disabled: !this.haveLock(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Separator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mobileStack\",\n      style: {\n        display: 'flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1337,\n        columnNumber: 19\n      }\n    }, this.screenShareStream && /*#__PURE__*/React.createElement(Button, {\n      fluid: true,\n      className: \"toolButton\",\n      icon: true,\n      labelPosition: \"left\",\n      color: \"red\",\n      onClick: this.stopScreenShare,\n      disabled: (sharer === null || sharer === void 0 ? void 0 : sharer.id) !== ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1339,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1348,\n        columnNumber: 25\n      }\n    }), \"Stop Share\"), !this.screenShareStream && !sharer && !this.isVBrowser() && /*#__PURE__*/React.createElement(Popup, {\n      content: `Share a tab or an application. Make sure to check \"Share audio\" for best results.`,\n      trigger: /*#__PURE__*/React.createElement(Button, {\n        fluid: true,\n        className: \"toolButton\",\n        disabled: !this.haveLock(),\n        icon: true,\n        labelPosition: \"left\",\n        color: 'instagram',\n        onClick: this.setupScreenShare,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1356,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: 'slideshare',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1365,\n          columnNumber: 29\n        }\n      }), \"Screenshare\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1353,\n        columnNumber: 23\n      }\n    }), !this.screenShareStream && !sharer && !this.isVBrowser() && /*#__PURE__*/React.createElement(Popup, {\n      content: \"Launch a shared virtual browser\",\n      trigger: /*#__PURE__*/React.createElement(Button, {\n        fluid: true,\n        className: \"toolButton\",\n        disabled: !this.haveLock(),\n        icon: true,\n        labelPosition: \"left\",\n        color: \"green\",\n        onClick: () => {\n          this.setState({\n            isVBrowserModalOpen: true\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1375,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"desktop\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1386,\n          columnNumber: 29\n        }\n      }), \"VBrowser\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372,\n        columnNumber: 23\n      }\n    }), this.isVBrowser() && /*#__PURE__*/React.createElement(Popup, {\n      content: \"Choose the person controlling the VBrowser\",\n      trigger: /*#__PURE__*/React.createElement(Dropdown, {\n        icon: \"keyboard\",\n        labeled: true,\n        className: \"icon\",\n        style: {\n          height: '36px'\n        },\n        button: true,\n        value: this.state.controller,\n        placeholder: \"No controller\",\n        onChange: this.changeController,\n        selection: true,\n        disabled: !this.haveLock(),\n        options: this.state.participants.map(p => ({\n          text: this.state.nameMap[p.id] || p.id,\n          value: p.id\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1396,\n          columnNumber: 27\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1393,\n        columnNumber: 23\n      }\n    }), this.isVBrowser() && /*#__PURE__*/React.createElement(Dropdown, {\n      icon: \"desktop\",\n      labeled: true,\n      className: \"icon\",\n      style: {\n        height: '36px'\n      },\n      button: true,\n      disabled: !this.haveLock(),\n      value: this.state.vBrowserResolution,\n      onChange: (e, data) => this.setState({\n        vBrowserResolution: data.value\n      }),\n      selection: true,\n      options: [{\n        text: '1080p',\n        value: '1920x1080@30',\n        disabled: !this.state.isVBrowserLarge\n      }, {\n        text: '720p',\n        value: '1280x720@30'\n      }, {\n        text: '576p',\n        value: '1024x576@60'\n      }, {\n        text: '486p',\n        value: '864x486@60'\n      }, {\n        text: '360p',\n        value: '640x360@60'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416,\n        columnNumber: 23\n      }\n    }), this.isVBrowser() && /*#__PURE__*/React.createElement(Button, {\n      fluid: true,\n      className: \"toolButton\",\n      icon: true,\n      labelPosition: \"left\",\n      color: \"red\",\n      disabled: !this.haveLock(),\n      onClick: this.stopVBrowser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1456,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1465,\n        columnNumber: 25\n      }\n    }), \"Stop VBrowser\"), !this.screenShareStream && !sharer && !this.isVBrowser() && /*#__PURE__*/React.createElement(Popup, {\n      content: \"Stream your own video file\",\n      trigger: /*#__PURE__*/React.createElement(Button, {\n        fluid: true,\n        className: \"toolButton\",\n        disabled: !this.haveLock(),\n        icon: true,\n        labelPosition: \"left\",\n        onClick: this.setupFileShare,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1473,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"file\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1481,\n          columnNumber: 29\n        }\n      }), \"File\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1470,\n        columnNumber: 23\n      }\n    }), false && /*#__PURE__*/React.createElement(SearchComponent, {\n      setMedia: this.setMedia,\n      type: 'youtube',\n      streamPath: this.state.settings.streamPath,\n      mediaPath: this.state.settings.mediaPath,\n      disabled: !this.haveLock(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1488,\n        columnNumber: 23\n      }\n    }), Boolean(this.state.settings.mediaPath) && /*#__PURE__*/React.createElement(SearchComponent, {\n      setMedia: this.setMedia,\n      type: 'media',\n      streamPath: this.state.settings.streamPath,\n      mediaPath: this.state.settings.mediaPath,\n      disabled: !this.haveLock(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1497,\n        columnNumber: 23\n      }\n    }), Boolean(this.state.settings.streamPath) && /*#__PURE__*/React.createElement(SearchComponent, {\n      setMedia: this.setMedia,\n      type: 'stream',\n      streamPath: this.state.settings.streamPath,\n      mediaPath: this.state.settings.mediaPath,\n      launchMultiSelect: this.launchMultiSelect,\n      disabled: !this.haveLock(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 23\n      }\n    }), this.state.currentMedia && /*#__PURE__*/React.createElement(Popup, {\n      content: \"Upload a .srt subtitle file for this video\",\n      trigger: /*#__PURE__*/React.createElement(Button, {\n        fluid: true,\n        color: \"violet\",\n        className: \"toolButton\",\n        icon: true,\n        labelPosition: \"left\",\n        onClick: this.setSubtitle,\n        disabled: !this.haveLock(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1519,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"closed captioning\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1528,\n          columnNumber: 29\n        }\n      }), \"Subtitle\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1516,\n        columnNumber: 23\n      }\n    }), !this.state.isSubscriber && /*#__PURE__*/React.createElement(Popup, {\n      content: \"Subscribe to help support us and enable additional features!\",\n      trigger: /*#__PURE__*/React.createElement(Button, {\n        fluid: true,\n        color: \"orange\",\n        className: \"toolButton\",\n        icon: true,\n        labelPosition: \"left\",\n        onClick: () => this.setState({\n          isSubscribeModalOpen: true\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1538,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"plus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1548,\n          columnNumber: 29\n        }\n      }), \"Subscribe\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1535,\n        columnNumber: 23\n      }\n    }), this.state.isSubscriber && /*#__PURE__*/React.createElement(Popup, {\n      content: \"Manage your subscription\",\n      trigger: /*#__PURE__*/React.createElement(Button, {\n        fluid: true,\n        color: \"orange\",\n        className: \"toolButton\",\n        icon: true,\n        labelPosition: \"left\",\n        onClick: this.onManage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"wrench\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1566,\n          columnNumber: 29\n        }\n      }), \"Manage\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1555,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(Separator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1573,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"fullScreenContainer\",\n      className: this.state.fullScreen ? 'fullScreenContainer' : '',\n      style: {\n        flexGrow: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1574,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"playerContainer\",\n      tabIndex: 1,\n      onKeyDown: this.onVideoKeydown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1581,\n        columnNumber: 21\n      }\n    }, (this.state.loading || !this.state.currentMedia || this.state.nonPlayableMedia) && /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"videoContent\",\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1589,\n        columnNumber: 25\n      }\n    }, this.state.loading && /*#__PURE__*/React.createElement(Dimmer, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1599,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1600,\n        columnNumber: 31\n      }\n    }, this.isVBrowser() ? 'Launching virtual browser. This can take up to a minute.' : '')), !this.state.loading && !this.state.currentMedia && /*#__PURE__*/React.createElement(Message, {\n      color: \"yellow\",\n      icon: \"hand point up\",\n      header: \"You're not watching anything!\",\n      content: \"Pick something to watch above.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1608,\n        columnNumber: 29\n      }\n    }), !this.state.loading && this.state.nonPlayableMedia && /*#__PURE__*/React.createElement(Message, {\n      color: \"red\",\n      icon: \"frown\",\n      header: \"It doesn't look like this is a media file!\",\n      content: \"Maybe you meant to launch a VBrowser if you're trying to visit a web page?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1617,\n        columnNumber: 31\n      }\n    })), /*#__PURE__*/React.createElement(\"iframe\", {\n      style: {\n        display: this.isYouTube() && !this.state.loading ? 'block' : 'none'\n      },\n      title: \"YouTube\",\n      id: \"leftYt\",\n      className: \"videoContent\",\n      allowFullScreen: true,\n      frameBorder: \"0\",\n      allow: \"autoplay\",\n      src: \"https://www.youtube.com/embed/?enablejsapi=1&controls=0&rel=0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1626,\n        columnNumber: 23\n      }\n    }), this.isVBrowser() && this.getVBrowserPass() && this.getVBrowserHost() ? /*#__PURE__*/React.createElement(VBrowser, {\n      username: this.socket.id,\n      password: this.getVBrowserPass(),\n      hostname: this.getVBrowserHost(),\n      controlling: this.state.controller === this.socket.id,\n      setLoadingFalse: this.setLoadingFalse,\n      resolution: this.state.vBrowserResolution,\n      isAutoPlayable: this.state.isAutoPlayable,\n      setResolution: data => this.setState({\n        vBrowserResolution: data\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1644,\n        columnNumber: 25\n      }\n    }) : /*#__PURE__*/React.createElement(\"video\", {\n      style: {\n        display: this.isVideo() && !this.state.loading ? 'block' : 'none',\n        width: '100%'\n      },\n      id: \"leftVideo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1657,\n        columnNumber: 25\n      }\n    }), this.state.fullScreen && this.state.currentMedia && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controlsContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1669,\n        columnNumber: 25\n      }\n    }, controls)), this.state.fullScreen && /*#__PURE__*/React.createElement(Chat, {\n      className: \"fullScreenChat\",\n      chat: this.state.chat,\n      nameMap: this.state.nameMap,\n      pictureMap: this.state.pictureMap,\n      socket: this.socket,\n      scrollTimestamp: this.state.scrollTimestamp,\n      getMediaDisplayName: this.getMediaDisplayName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1673,\n        columnNumber: 23\n      }\n    })), this.state.currentMedia && controls, Boolean(this.state.total) && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1686,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Progress, {\n      size: \"tiny\",\n      color: \"green\",\n      inverted: true,\n      value: this.state.downloaded,\n      total: this.state.total // indicating\n      ,\n      label: Math.min(this.state.downloaded / this.state.total * 100, 100).toFixed(2) + '% - ' + formatSpeed(this.state.speed) + ' - ' + this.state.connections + ' connections',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1687,\n        columnNumber: 23\n      }\n    })))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      style: {\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      className: \"fullHeightColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1710,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      inverted: true,\n      fluid: true,\n      label: 'Name:',\n      value: this.state.myName,\n      onChange: this.updateName,\n      icon: /*#__PURE__*/React.createElement(Icon, {\n        onClick: () => this.updateName(null, {\n          value: generateName()\n        }),\n        name: \"refresh\",\n        inverted: true,\n        circular: true,\n        link: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1722,\n          columnNumber: 21\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1715,\n        columnNumber: 17\n      }\n    }), !this.state.fullScreen && /*#__PURE__*/React.createElement(Menu, {\n      inverted: true,\n      widths: 3,\n      style: {\n        marginTop: '4px',\n        marginBottom: '4px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1735,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Menu.Item, {\n      name: \"chat\",\n      active: this.state.currentTab === 'chat',\n      onClick: () => this.setState({\n        currentTab: 'chat'\n      }),\n      as: \"a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1740,\n        columnNumber: 21\n      }\n    }, \"Chat\"), /*#__PURE__*/React.createElement(Menu.Item, {\n      name: \"people\",\n      active: this.state.currentTab === 'people',\n      onClick: () => this.setState({\n        currentTab: 'people'\n      }),\n      as: \"a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1749,\n        columnNumber: 21\n      }\n    }, \"Webcam (\", this.state.participants.length, \")\")), /*#__PURE__*/React.createElement(Chat, {\n      chat: this.state.chat,\n      nameMap: this.state.nameMap,\n      pictureMap: this.state.pictureMap,\n      socket: this.socket,\n      scrollTimestamp: this.state.scrollTimestamp,\n      getMediaDisplayName: this.getMediaDisplayName,\n      hide: this.state.currentTab !== 'chat',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1760,\n        columnNumber: 17\n      }\n    }), this.state.state === 'connected' && /*#__PURE__*/React.createElement(VideoChat, {\n      socket: this.socket,\n      participants: this.state.participants,\n      nameMap: this.state.nameMap,\n      pictureMap: this.state.pictureMap,\n      tsMap: this.state.tsMap,\n      rosterUpdateTS: this.state.rosterUpdateTS,\n      hide: this.state.currentTab !== 'people',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1770,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(SettingsTab, {\n      hide: this.state.currentTab !== 'settings',\n      user: this.state.user,\n      roomLock: this.state.roomLock,\n      setRoomLock: this.setRoomLock,\n      socket: this.socket,\n      isSubscriber: this.state.isSubscriber,\n      roomId: this.state.roomId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1780,\n        columnNumber: 17\n      }\n    })))));\n  }\n\n}\nexport const Separator = () => /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    height: '4px',\n    flexShrink: 0\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 1798,\n    columnNumber: 32\n  }\n});","map":{"version":3,"sources":["/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/App/App.tsx"],"names":["querystring","axios","magnet","React","Button","Dimmer","Dropdown","Grid","Icon","Input","Loader","Message","Modal","Popup","Progress","Menu","io","VTTConverter","formatSpeed","getMediaType","iceServers","isMobile","serverPath","testAutoplay","openFileSelector","getAndSaveClientId","generateName","Chat","TopBar","VBrowser","VideoChat","getCurrentSettings","MultiStreamModal","ComboBox","SearchComponent","Controls","firebase","SubscribeModal","VBrowserModal","SettingsTab","ErrorModal","PasswordModal","firebaseConfig","process","env","REACT_APP_FIREBASE_CONFIG","initializeApp","JSON","parse","App","Component","state","currentMedia","currentMediaPaused","currentSubtitle","participants","rosterUpdateTS","Number","Date","chat","tsMap","nameMap","pictureMap","myName","myPicture","loading","scrollTimestamp","fullScreen","controlsTimestamp","watchOptions","isScreenSharing","isScreenSharingFile","isVBrowser","user","undefined","isYouTubeReady","isAutoPlayable","downloaded","total","speed","connections","multiStreamSelection","error","isErrorAuth","settings","vBrowserResolution","isVBrowserLarge","nonPlayableMedia","currentTab","window","location","search","substring","tab","isSubscriber","isSubscribeModalOpen","isVBrowserModalOpen","roomLock","controller","roomId","savedPasswords","errorMessage","successMessage","socket","watchPartyYTPlayer","ytDebounce","screenShareStream","screenHostPC","screenSharePC","progressUpdater","loadSettings","customSettingsData","fetch","customSettings","json","setState","loadSignInData","firstName","displayName","split","updateName","value","photoURL","updatePicture","updateUid","token","getIdToken","response","uid","data","loadYouTube","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","ytPlayer","YT","Player","events","onReady","isYouTube","emit","onStateChange","e","PlayerState","CUED","PLAYING","PAUSED","doPlay","doPause","setTimeout","init","query","hash","props","vanity","get","Error","console","join","password","savedPasswordsString","localStorage","getItem","warn","connect","transports","clientId","on","canAutoplay","userName","err","success","doSeek","isSubtitled","toggleSubtitle","video","isScreenShare","startsWith","stopScreenShare","isFileShare","stopVBrowser","paused","Boolean","subtitle","getVBrowserHost","log","setLoadingFalse","leftVideo","getElementById","pause","stopVideo","setMute","doSrc","videoTS","addEventListener","jumpToLeader","once","clearInterval","includes","setInterval","replace","disableChatSound","visibilityState","Audio","play","push","syncSubtitle","updateScreenShare","msg","from","pc","sharer","ice","addIceCandidate","RTCIceCandidate","sdp","type","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","sendSignalSS","localDescription","getCurrentTime","setupFileShare","files","file","srcObject","URL","createObjectURL","stream","captureStream","onaddtrack","getVideoTracks","getAudioTracks","length","onended","setupScreenShare","navigator","mediaDevices","getDisplayMedia","cursor","height","logicalSurface","audio","getTracks","forEach","track","stop","close","Object","values","find","p","id","RTCPeerConnection","addStream","onicecandidate","event","candidate","onnegotiationneeded","offer","createOffer","onaddstream","setupVBrowser","rcToken","options","changeController","setSubtitle","reader","FileReader","subData","target","result","readAsText","to","isVideo","isHttp","getVBrowserPass","currentTime","getDuration","duration","isPaused","ended","getPlayerState","ENDED","isMuted","muted","textTracks","mode","current","getOption","languageCode","maxTS","getLeaderTime","time","innerHTML","url","videoId","altVideoId","slice","cueVideoById","name","playVideo","pauseVideo","seekTo","togglePlay","shouldPlay","onSeek","rect","getBoundingClientRect","x","clientX","left","max","width","Math","onVideoKeydown","key","preventDefault","toggleMute","bVideoOnly","container","fullscreenElement","requestFullscreen","bChangeElements","exitFullscreen","mute","unMute","setVolume","volume","getVolume","loadSubtitles","subtitleSrc","subtitlePath","lastIndexOf","getFileName","buffer","arrayBuffer","vttConverter","Blob","getURL","kind","label","srclang","appendChild","offset","cues","i","cue","origStart","startTime","origEnd","endTime","setOption","tracks","setMedia","launchMultiSelect","resetMultiSelect","setItem","getMediaDisplayName","input","magnetUrl","torrent","magnetParsed","decode","onManage","resp","method","headers","body","stringify","return_url","href","session","assign","setRoomLock","locked","haveLock","componentDidMount","onfullscreenchange","auth","onAuthStateChanged","render","controls","position","bottom","right","display","justifyContent","flexDirection","streamPath","mediaPath","map","text","disabled","flexGrow","alignItems","min","toFixed","marginTop","marginBottom","Separator","flexShrink"],"mappings":"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","sourcesContent":["import './App.css';\n\nimport querystring from 'querystring';\nimport axios from 'axios';\n//@ts-ignore\nimport magnet from 'magnet-uri';\nimport React from 'react';\nimport {\n  Button,\n  Dimmer,\n  Dropdown,\n  DropdownProps,\n  Grid,\n  Icon,\n  Input,\n  Loader,\n  Message,\n  Modal,\n  Popup,\n  Progress,\n  Menu,\n} from 'semantic-ui-react';\n//@ts-ignore\nimport io from 'socket.io-client';\n//@ts-ignore\nimport VTTConverter from 'srt-webvtt';\nimport {\n  formatSpeed,\n  getMediaType,\n  iceServers,\n  isMobile,\n  serverPath,\n  testAutoplay,\n  openFileSelector,\n  getAndSaveClientId,\n} from '../../utils';\nimport { generateName } from '../../utils/generateName';\nimport { Chat } from '../Chat';\nimport { TopBar } from '../TopBar';\nimport { VBrowser } from '../VBrowser';\nimport { VideoChat } from '../VideoChat';\nimport { getCurrentSettings } from '../Settings';\nimport { MultiStreamModal } from '../Modal/MultiStreamModal';\nimport { ComboBox } from '../ComboBox/ComboBox';\nimport { SearchComponent } from '../SearchComponent/SearchComponent';\nimport { Controls } from '../Controls/Controls';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { SubscribeModal } from '../Modal/SubscribeModal';\nimport { VBrowserModal } from '../Modal/VBrowserModal';\nimport { SettingsTab } from '../Settings/SettingsTab';\nimport { ErrorModal } from '../Modal/ErrorModal';\nimport { PasswordModal } from '../Modal/PasswordModal';\n\nconst firebaseConfig = process.env.REACT_APP_FIREBASE_CONFIG;\nif (firebaseConfig) {\n  firebase.initializeApp(JSON.parse(firebaseConfig));\n}\n\ndeclare global {\n  interface Window {\n    onYouTubeIframeAPIReady: any;\n    YT: any;\n    FB: any;\n    fbAsyncInit: Function;\n  }\n}\n\ninterface AppProps {\n  vanity?: string;\n}\n\ninterface AppState {\n  state: 'init' | 'starting' | 'connected';\n  currentMedia: string;\n  currentSubtitle: string;\n  currentMediaPaused: boolean;\n  participants: User[];\n  rosterUpdateTS: Number;\n  chat: ChatMessage[];\n  tsMap: NumberDict;\n  nameMap: StringDict;\n  pictureMap: StringDict;\n  myName: string;\n  myPicture: string;\n  loading: boolean;\n  scrollTimestamp: number;\n  fullScreen: boolean;\n  controlsTimestamp: number;\n  watchOptions: SearchResult[];\n  isScreenSharing: boolean;\n  isScreenSharingFile: boolean;\n  isVBrowser: boolean;\n  user?: firebase.User;\n  isYouTubeReady: boolean;\n  isAutoPlayable: boolean;\n  downloaded: number;\n  total: number;\n  speed: number;\n  connections: number;\n  multiStreamSelection?: any[];\n  error: string;\n  isErrorAuth: boolean;\n  settings: Settings;\n  vBrowserResolution: string;\n  isVBrowserLarge: boolean;\n  nonPlayableMedia: boolean;\n  currentTab: string;\n  isSubscriber: boolean;\n  isSubscribeModalOpen: boolean;\n  isVBrowserModalOpen: boolean;\n  roomLock: string;\n  controller?: string;\n  savedPasswords: StringDict;\n  roomId: string;\n  errorMessage: string;\n  successMessage: string;\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  state: AppState = {\n    state: 'starting',\n    currentMedia: '',\n    currentMediaPaused: false,\n    currentSubtitle: '',\n    participants: [],\n    rosterUpdateTS: Number(new Date()),\n    chat: [],\n    tsMap: {},\n    nameMap: {},\n    pictureMap: {},\n    myName: '',\n    myPicture: '',\n    loading: true,\n    scrollTimestamp: 0,\n    fullScreen: false,\n    controlsTimestamp: 0,\n    watchOptions: [],\n    isScreenSharing: false,\n    isScreenSharingFile: false,\n    isVBrowser: false,\n    user: undefined,\n    isYouTubeReady: false,\n    isAutoPlayable: true,\n    downloaded: 0,\n    total: 0,\n    speed: 0,\n    connections: 0,\n    multiStreamSelection: undefined,\n    error: '',\n    isErrorAuth: false,\n    settings: {},\n    vBrowserResolution: '1280x720@30',\n    isVBrowserLarge: false,\n    nonPlayableMedia: false,\n    currentTab:\n      (querystring.parse(window.location.search.substring(1)).tab as string) ||\n      'chat',\n    isSubscriber: false,\n    isSubscribeModalOpen: false,\n    isVBrowserModalOpen: false,\n    roomLock: '',\n    controller: '',\n    roomId: '',\n    savedPasswords: {},\n    errorMessage: '',\n    successMessage: '',\n  };\n  socket: any = null;\n  watchPartyYTPlayer: any = null;\n  ytDebounce = true;\n  screenShareStream?: MediaStream;\n  screenHostPC: PCDict = {};\n  screenSharePC?: RTCPeerConnection;\n  progressUpdater?: number;\n\n  async componentDidMount() {\n    document.onfullscreenchange = () => {\n      this.setState({ fullScreen: Boolean(document.fullscreenElement) });\n    };\n\n    // Send heartbeat to the server\n    window.setInterval(() => {\n      window.fetch(serverPath + '/ping');\n    }, 10 * 60 * 1000);\n\n    if (firebaseConfig) {\n      firebase.auth().onAuthStateChanged(async (user: firebase.User | null) => {\n        if (user) {\n          // console.log(user);\n          this.setState({ user }, async () => {\n            this.loadSignInData();\n          });\n        }\n      });\n    }\n    this.loadSettings();\n    this.loadYouTube();\n    this.init();\n  }\n\n  loadSettings = async () => {\n    // Load settings from localstorage and remote\n    const customSettingsData = await fetch(serverPath + '/settings');\n    const customSettings = await customSettingsData.json();\n    let settings = { ...getCurrentSettings(), ...customSettings };\n    this.setState({ settings });\n  };\n\n  loadSignInData = async () => {\n    const user = this.state.user;\n    if (user && this.socket) {\n      // NOTE: firebase auth doesn't provide the actual first name data that individual providers (G/FB) do\n      // It's accessible at the time the user logs in but not afterward\n      // If we want accurate surname/given name we'll need to save that somewhere\n      const firstName = user.displayName?.split(' ')[0];\n      if (firstName) {\n        this.updateName(null, { value: firstName });\n      }\n      if (user.photoURL) {\n        this.updatePicture(user.photoURL + '?height=128&width=128');\n      }\n      this.updateUid(user);\n      const token = await user.getIdToken();\n      const response = await window.fetch(\n        serverPath + `/metadata?uid=${user.uid}&token=${token}`\n      );\n      const data = await response.json();\n      this.setState({ isSubscriber: data.isSubscriber });\n    }\n  };\n\n  loadYouTube = () => {\n    // This code loads the IFrame Player API code asynchronously.\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    var firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag!.parentNode!.insertBefore(tag, firstScriptTag);\n\n    window.onYouTubeIframeAPIReady = () => {\n      // Note: this fails silently if the element is not available\n      const ytPlayer = new window.YT.Player('leftYt', {\n        events: {\n          onReady: () => {\n            this.watchPartyYTPlayer = ytPlayer;\n            this.setState({ isYouTubeReady: true, loading: false });\n            // We might have failed to play YT originally, ask for the current video again\n            if (this.isYouTube()) {\n              this.socket.emit('CMD:askHost');\n            }\n          },\n          onStateChange: (e: any) => {\n            if (\n              getMediaType(this.state.currentMedia) === 'youtube' &&\n              e.data === window.YT?.PlayerState?.CUED\n            ) {\n              this.setState({ loading: false });\n            }\n            // console.log(this.ytDebounce, e.data, this.watchPartyYTPlayer?.getVideoUrl());\n            if (\n              this.ytDebounce &&\n              ((e.data === window.YT?.PlayerState?.PLAYING &&\n                this.state.currentMediaPaused) ||\n                (e.data === window.YT?.PlayerState?.PAUSED &&\n                  !this.state.currentMediaPaused))\n            ) {\n              this.ytDebounce = false;\n              if (e.data === window.YT?.PlayerState?.PLAYING) {\n                this.socket.emit('CMD:play');\n                this.doPlay();\n              } else {\n                this.socket.emit('CMD:pause');\n                this.doPause();\n              }\n              window.setTimeout(() => (this.ytDebounce = true), 500);\n            }\n          },\n        },\n      });\n    };\n  };\n\n  init = async () => {\n    // Load room ID from url\n    let roomId = '/default';\n    let query = window.location.hash.substring(1);\n    if (query) {\n      roomId = '/' + query;\n    }\n    // if a vanity name, resolve the url to a room id\n    if (this.props.vanity) {\n      try {\n        const response = await axios.get(\n          serverPath + '/resolveRoom/' + this.props.vanity\n        );\n        if (response.data.roomId) {\n          roomId = response.data.roomId;\n        } else {\n          throw new Error('failed to resolve room name');\n        }\n      } catch (e) {\n        console.error(e);\n        this.setState({ error: \"There's no room with this name.\" });\n        return;\n      }\n    }\n    this.setState({ roomId });\n    this.join(roomId);\n  };\n\n  join = async (roomId: string) => {\n    let password = '';\n    try {\n      const savedPasswordsString = window.localStorage.getItem(\n        'watchparty-passwords'\n      );\n      const savedPasswords = JSON.parse(savedPasswordsString || '{}');\n      this.setState({ savedPasswords });\n      password = savedPasswords[roomId] || '';\n    } catch (e) {\n      console.warn('[ALERT] Could not parse saved passwords');\n    }\n    const socket = io.connect(serverPath + roomId, {\n      transports: ['websocket'],\n      query: {\n        clientId: getAndSaveClientId(),\n        password,\n      },\n    });\n    this.socket = socket;\n    socket.on('connect', async () => {\n      const canAutoplay = await testAutoplay();\n      this.setState({ isAutoPlayable: canAutoplay });\n      this.setState({ state: 'connected' });\n      // Load username from localstorage\n      let userName = window.localStorage.getItem('watchparty-username');\n      this.updateName(null, { value: userName || generateName() });\n      // if (!this.state.user && firebaseConfig) {\n      //   await firebase.auth().signInAnonymously();\n      // }\n      this.loadSignInData();\n    });\n    socket.on('error', (err: any) => {\n      console.error(err);\n      if (err === 'Invalid namespace') {\n        this.setState({ error: \"There's no room with this name.\" });\n      } else if (err === 'not authorized') {\n        this.setState({ isErrorAuth: true });\n      } else {\n        this.setState({ error: 'An error occurred.' });\n      }\n    });\n    socket.on('errorMessage', (err: string) => {\n      this.setState({ errorMessage: err });\n      setTimeout(() => {\n        this.setState({ errorMessage: '' });\n      }, 3000);\n    });\n    socket.on('successMessage', (success: string) => {\n      this.setState({ successMessage: success });\n      setTimeout(() => {\n        this.setState({ successMessage: '' });\n      }, 3000);\n    });\n    socket.on('REC:play', () => {\n      this.doPlay();\n    });\n    socket.on('REC:pause', () => {\n      this.doPause();\n    });\n    socket.on('REC:seek', (data: any) => {\n      this.doSeek(data);\n    });\n    socket.on('REC:subtitle', (data: string) => {\n      this.setState(\n        { currentSubtitle: serverPath + '/subtitle/' + data },\n        () => {\n          if (!this.isSubtitled()) {\n            this.toggleSubtitle();\n          }\n        }\n      );\n    });\n    socket.on('REC:changeController', (data: string) => {\n      this.setState({ controller: data });\n    });\n    socket.on('REC:host', (data: HostState) => {\n      let currentMedia = data.video || '';\n      if (this.isScreenShare() && !currentMedia.startsWith('screenshare://')) {\n        this.stopScreenShare();\n      }\n      if (this.isFileShare() && !currentMedia.startsWith('fileshare://')) {\n        this.stopScreenShare();\n      }\n      if (this.isScreenShare() && currentMedia.startsWith('screenshare://')) {\n        // Ignore, it's probably a reconnection\n        return;\n      }\n      if (this.isFileShare() && currentMedia.startsWith('fileshare://')) {\n        // Ignore, it's probably a reconnection\n        return;\n      }\n      if (this.isVBrowser() && !currentMedia.startsWith('vbrowser://')) {\n        this.stopVBrowser();\n      }\n      this.setState(\n        {\n          currentMedia,\n          currentMediaPaused: data.paused,\n          currentSubtitle: Boolean(data.subtitle)\n            ? serverPath + '/subtitle/' + data.subtitle\n            : '',\n          loading: Boolean(data.video),\n          nonPlayableMedia: false,\n          isVBrowserLarge: data.isVBrowserLarge,\n          vBrowserResolution: data.isVBrowserLarge\n            ? '1920x1080@30'\n            : '1280x720@30',\n          controller: data.controller,\n        },\n        () => {\n          if (\n            this.state.isScreenSharingFile ||\n            (this.isVBrowser() && this.getVBrowserHost())\n          ) {\n            console.log(\n              'skipping REC:host video since fileshare is using leftVideo or this is a vbrowser'\n            );\n            this.setLoadingFalse();\n            return;\n          }\n          // Stop all players\n          const leftVideo = document.getElementById(\n            'leftVideo'\n          ) as HTMLMediaElement;\n          leftVideo?.pause();\n          this.watchPartyYTPlayer?.stopVideo();\n\n          // If we can't autoplay, start muted\n          if (!this.state.isAutoPlayable) {\n            this.setMute(true);\n          }\n\n          if (this.isYouTube() && !this.watchPartyYTPlayer) {\n            console.log(\n              'YT player not ready, onReady callback will retry when it is'\n            );\n          } else if (this.isVBrowser()) {\n            console.log(\n              'not playing video as this is a vbrowser:// placeholder'\n            );\n          } else {\n            // Start this video\n            this.doSrc(data.video, data.videoTS);\n            if (!data.paused) {\n              this.doPlay();\n            }\n            if (data.subtitle) {\n              if (!this.isSubtitled()) {\n                this.toggleSubtitle();\n              }\n            }\n            // One time, when we're ready to play\n            leftVideo?.addEventListener(\n              'canplay',\n              () => {\n                this.setLoadingFalse();\n                this.jumpToLeader();\n              },\n              { once: true }\n            );\n\n            // Progress updater\n            window.clearInterval(this.progressUpdater);\n            this.setState({ downloaded: 0, total: 0, speed: 0 });\n            if (currentMedia.includes('/stream?torrent=magnet')) {\n              this.progressUpdater = window.setInterval(async () => {\n                const response = await window.fetch(\n                  currentMedia.replace('/stream', '/progress')\n                );\n                const data = await response.json();\n                this.setState({\n                  downloaded: data.downloaded,\n                  total: data.total,\n                  speed: data.speed,\n                  connections: data.connections,\n                });\n              }, 1000);\n            }\n          }\n        }\n      );\n    });\n    socket.on('REC:chat', (data: ChatMessage) => {\n      if (\n        !getCurrentSettings().disableChatSound &&\n        document.visibilityState &&\n        document.visibilityState !== 'visible'\n      ) {\n        new Audio('/clearly.mp3').play();\n      }\n      this.state.chat.push(data);\n      this.setState({\n        chat: this.state.chat,\n        scrollTimestamp: Number(new Date()),\n      });\n    });\n    socket.on('REC:tsMap', (data: NumberDict) => {\n      this.setState({ tsMap: data });\n      this.syncSubtitle();\n    });\n    socket.on('REC:nameMap', (data: StringDict) => {\n      this.setState({ nameMap: data });\n    });\n    socket.on('REC:pictureMap', (data: StringDict) => {\n      this.setState({ pictureMap: data });\n    });\n    socket.on('REC:lock', (data: string) => {\n      this.setState({ roomLock: data });\n    });\n    socket.on('roster', (data: User[]) => {\n      this.setState(\n        { participants: data, rosterUpdateTS: Number(new Date()) },\n        () => {\n          this.updateScreenShare();\n        }\n      );\n    });\n    socket.on('chatinit', (data: any) => {\n      this.setState({ chat: data, scrollTimestamp: Number(new Date()) });\n    });\n    socket.on('signalSS', async (data: any) => {\n      // Handle messages received from signaling server\n      const msg = data.msg;\n      const from = data.from;\n      // Determine whether the message came from the sharer or the sharee\n      const pc = (data.sharer\n        ? this.screenSharePC\n        : this.screenHostPC[from]) as RTCPeerConnection;\n      if (msg.ice !== undefined) {\n        pc.addIceCandidate(new RTCIceCandidate(msg.ice));\n      } else if (msg.sdp && msg.sdp.type === 'offer') {\n        // console.log('offer');\n        await pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));\n        const answer = await pc.createAnswer();\n        await pc.setLocalDescription(answer);\n        this.sendSignalSS(from, { sdp: pc.localDescription }, !data.sharer);\n      } else if (msg.sdp && msg.sdp.type === 'answer') {\n        pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));\n      }\n    });\n    window.setInterval(() => {\n      if (this.state.currentMedia) {\n        this.socket.emit('CMD:ts', this.getCurrentTime());\n      }\n    }, 1000);\n  };\n\n  setupFileShare = async () => {\n    const files = await openFileSelector();\n    if (!files) {\n      return;\n    }\n    const file = files[0];\n    const leftVideo = document.getElementById('leftVideo') as HTMLMediaElement;\n    leftVideo.srcObject = null;\n    leftVideo.src = URL.createObjectURL(file);\n    leftVideo.play();\n    //@ts-ignore\n    const stream = leftVideo.captureStream();\n    // Can render video to a canvas to resize it, reduce size\n    stream.onaddtrack = () => {\n      console.log(stream, stream.getVideoTracks(), stream.getAudioTracks());\n      if (\n        !this.screenShareStream &&\n        stream.getVideoTracks().length &&\n        stream.getAudioTracks().length\n      ) {\n        stream.getVideoTracks()[0].onended = this.stopScreenShare;\n        this.screenShareStream = stream;\n        this.socket.emit('CMD:joinScreenShare', { file: true });\n        this.setState({ isScreenSharing: true, isScreenSharingFile: true });\n        stream.onaddtrack = undefined;\n      }\n    };\n  };\n\n  setupScreenShare = async () => {\n    //@ts-ignore\n    const stream = await navigator.mediaDevices.getDisplayMedia({\n      video: { cursor: 'never', height: 720, logicalSurface: true },\n      audio: true,\n    });\n    stream.getVideoTracks()[0].onended = this.stopScreenShare;\n    this.screenShareStream = stream;\n    this.socket.emit('CMD:joinScreenShare');\n    this.setState({ isScreenSharing: true });\n  };\n\n  stopScreenShare = async () => {\n    this.screenShareStream &&\n      this.screenShareStream.getTracks().forEach((track) => {\n        track.stop();\n      });\n    this.screenShareStream = undefined;\n    if (this.screenSharePC) {\n      this.screenSharePC.close();\n      this.screenSharePC = undefined;\n    }\n    Object.values(this.screenHostPC).forEach((pc) => {\n      pc.close();\n    });\n    this.screenHostPC = {};\n    if (this.state.isScreenSharing) {\n      this.socket.emit('CMD:leaveScreenShare');\n    }\n    this.setState({ isScreenSharing: false, isScreenSharingFile: false });\n  };\n\n  updateScreenShare = async () => {\n    if (!this.isScreenShare() && !this.isFileShare()) {\n      return;\n    }\n    // TODO teardown for those who leave\n    const sharer = this.state.participants.find((p) => p.isScreenShare);\n    if (sharer && sharer.id === this.socket.id) {\n      // We're the sharer, create a connection to each other member\n      this.state.participants.forEach((user) => {\n        const id = user.id;\n        if (id === this.socket.id && this.state.isScreenSharingFile) {\n          // Don't set up a connection to ourselves if sharing file\n          return;\n        }\n        if (!this.screenHostPC[id]) {\n          // Set up the RTCPeerConnection for sharing media to each member\n          const pc = new RTCPeerConnection({ iceServers: iceServers() });\n          this.screenHostPC[id] = pc;\n          //@ts-ignore\n          pc.addStream(this.screenShareStream);\n          pc.onicecandidate = (event) => {\n            // We generated an ICE candidate, send it to peer\n            if (event.candidate) {\n              this.sendSignalSS(id, { ice: event.candidate }, true);\n            }\n          };\n          pc.onnegotiationneeded = async () => {\n            // Start connection for peer's video\n            const offer = await pc.createOffer();\n            await pc.setLocalDescription(offer);\n            this.sendSignalSS(id, { sdp: pc.localDescription }, true);\n          };\n        }\n      });\n    }\n    // We're a watcher, establish connection to sharer\n    // If screensharing, sharer also does this\n    // If filesharing, sharer does not do this since we use leftVideo\n    if (sharer && !this.screenSharePC && !this.state.isScreenSharingFile) {\n      const pc = new RTCPeerConnection({ iceServers: iceServers() });\n      this.screenSharePC = pc;\n      pc.onicecandidate = (event) => {\n        // We generated an ICE candidate, send it to peer\n        if (event.candidate) {\n          this.sendSignalSS(sharer.id, { ice: event.candidate });\n        }\n      };\n      //@ts-ignore\n      pc.onaddstream = (event: any) => {\n        console.log('stream from webrtc peer');\n        // Mount the stream from peer\n        const stream = event.stream;\n        // console.log(stream);\n        const leftVideo = document.getElementById(\n          'leftVideo'\n        ) as HTMLMediaElement;\n        if (leftVideo) {\n          leftVideo.src = '';\n          leftVideo.srcObject = stream;\n          if (!this.state.isAutoPlayable) {\n            this.setMute(true);\n          }\n          leftVideo.play();\n        }\n      };\n    }\n  };\n\n  setupVBrowser = async (rcToken: string, options: { size: string }) => {\n    // user.uid is the public user identifier\n    // user.getIdToken() is the secret access token we can send to the server to prove identity\n    const user = this.state.user;\n    const uid = user?.uid;\n    const token = await user?.getIdToken();\n    this.socket.emit('CMD:startVBrowser', { options, uid, token, rcToken });\n  };\n\n  stopVBrowser = async () => {\n    this.socket.emit('CMD:stopVBrowser');\n  };\n\n  changeController = async (e: any, data: DropdownProps) => {\n    // console.log(data);\n    this.socket.emit('CMD:changeController', data.value);\n  };\n\n  setSubtitle = async () => {\n    const files = await openFileSelector('.srt');\n    if (!files) {\n      return;\n    }\n    const file = files[0];\n    const reader = new FileReader();\n    reader.addEventListener('load', (event) => {\n      const subData = event.target?.result;\n      this.socket.emit('CMD:subtitle', subData);\n    });\n    reader.readAsText(file);\n  };\n\n  sendSignalSS = async (to: string, data: any, sharer?: boolean) => {\n    // console.log('sendSS', to, data);\n    this.socket.emit('signalSS', { to, msg: data, sharer });\n  };\n\n  isYouTube = () => {\n    return getMediaType(this.state.currentMedia) === 'youtube';\n  };\n\n  isVideo = () => {\n    return getMediaType(this.state.currentMedia) === 'video';\n  };\n\n  isScreenShare = () => {\n    return this.state.currentMedia.startsWith('screenshare://');\n  };\n\n  isFileShare = () => {\n    return this.state.currentMedia.startsWith('fileshare://');\n  };\n\n  isVBrowser = () => {\n    return this.state.currentMedia.startsWith('vbrowser://');\n  };\n\n  isHttp = () => {\n    return this.state.currentMedia.startsWith('http');\n  };\n\n  getVBrowserPass = () => {\n    return this.state.currentMedia.replace('vbrowser://', '').split('@')[0];\n  };\n\n  getVBrowserHost = () => {\n    return this.state.currentMedia.replace('vbrowser://', '').split('@')[1];\n  };\n\n  getCurrentTime = () => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      return leftVideo?.currentTime;\n    }\n    if (this.isYouTube()) {\n      return this.watchPartyYTPlayer?.getCurrentTime();\n    }\n  };\n\n  getDuration = () => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      return leftVideo.duration;\n    }\n    if (this.isYouTube()) {\n      return this.watchPartyYTPlayer?.getDuration();\n    }\n    return 0;\n  };\n\n  isPaused = () => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      return leftVideo.paused || leftVideo.ended;\n    }\n    if (this.isYouTube()) {\n      return (\n        this.watchPartyYTPlayer?.getPlayerState() ===\n          window.YT?.PlayerState?.PAUSED ||\n        this.watchPartyYTPlayer?.getPlayerState() ===\n          window.YT?.PlayerState?.ENDED\n      );\n    }\n    return false;\n  };\n\n  isMuted = () => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      return leftVideo?.muted;\n    }\n    if (this.isYouTube()) {\n      return this.watchPartyYTPlayer?.isMuted();\n    }\n    return false;\n  };\n\n  isSubtitled = () => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      return (\n        leftVideo.textTracks[0] && leftVideo.textTracks[0].mode === 'showing'\n      );\n    }\n    if (this.isYouTube()) {\n      try {\n        const current = this.watchPartyYTPlayer?.getOption('captions', 'track');\n        return Boolean(current && current.languageCode);\n      } catch (e) {\n        console.warn(e);\n        return false;\n      }\n    }\n    return false;\n  };\n\n  jumpToLeader = () => {\n    // Jump to the leader's position\n    const maxTS = this.getLeaderTime();\n    if (maxTS > 0) {\n      console.log('jump to leader at ', maxTS);\n      this.doSeek(maxTS);\n    }\n  };\n\n  doSrc = async (src: string, time: number) => {\n    console.log('doSrc', src, time);\n    if (this.isScreenShare() || this.isFileShare() || this.isVBrowser()) {\n      // No-op as we'll set video when WebRTC completes\n      return;\n    }\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      if (leftVideo) {\n        leftVideo.srcObject = null;\n        leftVideo.src = src;\n        leftVideo.currentTime = time;\n        // Clear subtitles\n        leftVideo.innerHTML = '';\n      }\n    }\n    if (this.isYouTube()) {\n      let url = new window.URL(src);\n      // Standard link https://www.youtube.com/watch?v=ID\n      let videoId = querystring.parse(url.search.substring(1))['v'];\n      // Link shortener https://youtu.be/ID\n      let altVideoId = src.split('/').slice(-1)[0];\n      this.watchPartyYTPlayer?.cueVideoById(videoId || altVideoId, time);\n    }\n  };\n\n  doPlay = async () => {\n    this.setState({ currentMediaPaused: false }, async () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById(\n          'leftVideo'\n        ) as HTMLMediaElement;\n        try {\n          await leftVideo?.play();\n        } catch (e) {\n          // console.warn(e);\n          console.warn(e.name);\n          if (e.name === 'NotSupportedError') {\n            this.setState({ loading: false, nonPlayableMedia: true });\n          }\n        }\n      }\n      if (this.isYouTube()) {\n        console.log('play yt');\n        this.watchPartyYTPlayer?.playVideo();\n      }\n    });\n  };\n\n  doPause = () => {\n    this.setState({ currentMediaPaused: true }, async () => {\n      if (this.isVideo()) {\n        const leftVideo = document.getElementById(\n          'leftVideo'\n        ) as HTMLMediaElement;\n        leftVideo.pause();\n      }\n      if (this.isYouTube()) {\n        console.log('pause');\n        this.watchPartyYTPlayer?.pauseVideo();\n      }\n    });\n  };\n\n  doSeek = (time: number) => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      leftVideo.currentTime = time;\n    }\n    if (this.isYouTube()) {\n      this.watchPartyYTPlayer?.seekTo(time, true);\n    }\n  };\n\n  togglePlay = () => {\n    let shouldPlay = true;\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      shouldPlay = leftVideo.paused || leftVideo.ended;\n    } else if (this.isYouTube()) {\n      shouldPlay =\n        this.watchPartyYTPlayer?.getPlayerState() ===\n          window.YT?.PlayerState.PAUSED ||\n        this.getCurrentTime() === this.getDuration();\n    }\n    if (shouldPlay) {\n      this.socket.emit('CMD:play');\n      this.doPlay();\n    } else {\n      this.socket.emit('CMD:pause');\n      this.doPause();\n    }\n  };\n\n  onSeek = (e: any, time: number) => {\n    let target = time;\n    if (e) {\n      const rect = e.target.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const max = rect.width;\n      target = (x / max) * this.getDuration();\n    }\n    target = Math.max(target, 0);\n    this.doSeek(target);\n    this.socket.emit('CMD:seek', target);\n  };\n\n  onVideoKeydown = (e: any) => {\n    if (e.key === ' ') {\n      e.preventDefault();\n      this.togglePlay();\n    } else if (e.key === 'ArrowRight') {\n      this.onSeek(null, this.getCurrentTime() + 10);\n    } else if (e.key === 'ArrowLeft') {\n      this.onSeek(null, this.getCurrentTime() - 10);\n    } else if (e.key === 'c') {\n      this.toggleSubtitle();\n    } else if (e.key === 't') {\n      this.fullScreen(false);\n    } else if (e.key === 'f') {\n      this.fullScreen(true);\n    } else if (e.key === 'm') {\n      this.toggleMute();\n    }\n  };\n\n  fullScreen = async (bVideoOnly: boolean) => {\n    let container = document.getElementById(\n      'fullScreenContainer'\n    ) as HTMLElement;\n    if (bVideoOnly || isMobile()) {\n      container = document.getElementById(\n        this.isYouTube() ? 'leftYt' : 'leftVideo'\n      ) as HTMLElement;\n    }\n    if (!document.fullscreenElement) {\n      await container.requestFullscreen();\n      return;\n    }\n    const bChangeElements = document.fullscreenElement !== container;\n    await document.exitFullscreen();\n    if (bChangeElements) {\n      await container.requestFullscreen();\n    }\n  };\n\n  toggleMute = () => {\n    this.setMute(!this.isMuted());\n  };\n\n  setMute = (muted: boolean) => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      if (leftVideo) {\n        leftVideo.muted = muted;\n      }\n    }\n    if (this.isYouTube()) {\n      if (muted) {\n        this.watchPartyYTPlayer?.mute();\n      } else {\n        this.watchPartyYTPlayer?.unMute();\n      }\n    }\n  };\n\n  setVolume = (volume: number) => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      leftVideo.volume = volume;\n    }\n    if (this.isYouTube()) {\n      this.watchPartyYTPlayer?.setVolume(volume * 100);\n    }\n  };\n\n  getVolume = () => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      return leftVideo.volume;\n    }\n    if (this.isYouTube()) {\n      const volume = this.watchPartyYTPlayer?.getVolume();\n      return volume / 100;\n    }\n  };\n\n  loadSubtitles = async () => {\n    const leftVideo = document.getElementById('leftVideo') as HTMLMediaElement;\n    // Clear subtitles\n    leftVideo.innerHTML = '';\n    let subtitleSrc = '';\n    const src = this.state.currentMedia;\n    if (this.state.currentSubtitle) {\n      subtitleSrc = this.state.currentSubtitle;\n    } else if (src.includes('/stream?torrent=magnet')) {\n      subtitleSrc = src.replace('/stream', '/subtitles2');\n    } else if (src.startsWith('http')) {\n      const subtitlePath = src.slice(0, src.lastIndexOf('/') + 1);\n      // Expect subtitle name to be file name + .srt\n      subtitleSrc =\n        subtitlePath + 'subtitles/' + this.getFileName(src) + '.srt';\n    }\n    if (subtitleSrc) {\n      const response = await window.fetch(subtitleSrc);\n      const buffer = await response.arrayBuffer();\n      const vttConverter = new VTTConverter(new Blob([buffer]));\n      const url = await vttConverter.getURL();\n      const track = document.createElement('track');\n      track.kind = 'captions';\n      track.label = 'English';\n      track.srclang = 'en';\n      track.src = url;\n      leftVideo.appendChild(track);\n      leftVideo.textTracks[0].mode = 'showing';\n    }\n  };\n\n  syncSubtitle = () => {\n    const sharer = this.state.participants.find((p) => p.isScreenShare);\n    if (!sharer || sharer.id === this.socket.id) {\n      return;\n    }\n    // When sharing, our timestamp doesn't match the subtitles so adjust them\n    // For each cue, subtract the videoTS of the sharer, then add our own\n    const leftVideo = document.getElementById('leftVideo') as HTMLMediaElement;\n    const track = leftVideo?.textTracks[0];\n    let offset = leftVideo.currentTime - this.state.tsMap[sharer.id];\n    if (track && offset && track.cues) {\n      for (let i = 0; i < track.cues.length; i++) {\n        let cue = track.cues[i];\n        // console.log(cue.text, offset, (cue as any).origStart, (cue as any).origEnd);\n        if (!(cue as any).origStart) {\n          (cue as any).origStart = cue.startTime;\n          (cue as any).origEnd = cue.endTime;\n        }\n        cue.startTime = (cue as any).origStart + offset;\n        cue.endTime = (cue as any).origEnd + offset;\n      }\n    }\n  };\n\n  toggleSubtitle = () => {\n    if (this.isVideo()) {\n      const leftVideo = document.getElementById(\n        'leftVideo'\n      ) as HTMLMediaElement;\n      if (this.isSubtitled()) {\n        leftVideo.innerHTML = '';\n      } else {\n        this.loadSubtitles();\n      }\n    }\n    if (this.isYouTube()) {\n      const isSubtitled = this.isSubtitled();\n      // console.log(isSubtitled);\n      if (isSubtitled) {\n        // BUG this doesn't actually set the value so subtitles can't be toggled off\n        this.watchPartyYTPlayer?.setOption('captions', 'track', {});\n      } else {\n        this.watchPartyYTPlayer?.setOption('captions', 'reload', true);\n        const tracks = this.watchPartyYTPlayer?.getOption(\n          'captions',\n          'tracklist'\n        );\n        this.watchPartyYTPlayer?.setOption('captions', 'track', tracks[0]);\n      }\n    }\n  };\n\n  setMedia = (e: any, data: DropdownProps) => {\n    this.socket.emit('CMD:host', data.value);\n  };\n\n  launchMultiSelect = (data: any) => {\n    this.setState({ multiStreamSelection: data });\n  };\n\n  resetMultiSelect = () => {\n    this.setState({ multiStreamSelection: undefined });\n  };\n\n  updateName = (e: any, data: { value: string }) => {\n    this.setState({ myName: data.value });\n    this.socket.emit('CMD:name', data.value);\n    window.localStorage.setItem('watchparty-username', data.value);\n  };\n\n  updatePicture = (url: string) => {\n    this.setState({ myPicture: url });\n    this.socket.emit('CMD:picture', url);\n  };\n\n  updateUid = async (user: firebase.User) => {\n    const uid = user.uid;\n    const token = await user.getIdToken();\n    this.socket.emit('CMD:uid', { uid, token });\n  };\n\n  getMediaDisplayName = (input: string) => {\n    if (!input) {\n      return '';\n    }\n    // Show the whole URL for youtube\n    if (getMediaType(input) === 'youtube') {\n      return input;\n    }\n    if (input.startsWith('screenshare://')) {\n      let id = input.slice('screenshare://'.length);\n      return this.state.nameMap[id] + \"'s screen\";\n    }\n    if (input.startsWith('fileshare://')) {\n      let id = input.slice('fileshare://'.length);\n      return this.state.nameMap[id] + \"'s file\";\n    }\n    if (input.startsWith('vbrowser://')) {\n      return 'Virtual Browser' + (this.state.isVBrowserLarge ? '+' : '');\n    }\n    if (input.includes('/stream?torrent=magnet')) {\n      const search = new URL(input).search;\n      const magnetUrl = querystring.parse(search.substring(1)).torrent;\n      const magnetParsed = magnet.decode(magnetUrl);\n      return magnetParsed.name;\n    }\n    // Get the filename out of the URL\n    return input;\n  };\n\n  getFileName = (input: string) => {\n    return input.split('/').slice(-1)[0];\n  };\n\n  setLoadingFalse = () => {\n    this.setState({ loading: false });\n  };\n\n  onManage = async () => {\n    const resp = await window.fetch(serverPath + '/manageSub', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        uid: this.state.user?.uid,\n        token: await this.state.user?.getIdToken(),\n        return_url: window.location.href,\n      }),\n    });\n    const session = await resp.json();\n    console.log(session);\n    window.location.assign(session.url);\n  };\n\n  setRoomLock = async (locked: boolean) => {\n    const uid = this.state.user?.uid;\n    const token = await this.state.user?.getIdToken();\n    this.socket.emit('CMD:lock', { uid, token, locked });\n  };\n\n  haveLock = () => {\n    if (!this.state.roomLock) {\n      return true;\n    }\n    return this.state.user?.uid === this.state.roomLock;\n  };\n\n  getLeaderTime = () => {\n    return Math.max(...Object.values(this.state.tsMap));\n  };\n\n  render() {\n    const sharer = this.state.participants.find((p) => p.isScreenShare);\n    const controls = (\n      <Controls\n        key={this.state.controlsTimestamp}\n        togglePlay={this.togglePlay}\n        onSeek={this.onSeek}\n        fullScreen={this.fullScreen}\n        toggleMute={this.toggleMute}\n        toggleSubtitle={this.toggleSubtitle}\n        setVolume={this.setVolume}\n        getVolume={this.getVolume}\n        jumpToLeader={this.jumpToLeader}\n        paused={this.isPaused()}\n        muted={this.isMuted()}\n        subtitled={this.isSubtitled()}\n        currentTime={this.getCurrentTime()}\n        duration={this.getDuration()}\n        disabled={!this.haveLock()}\n        leaderTime={this.isHttp() ? this.getLeaderTime() : undefined}\n      />\n    );\n    return (\n      <React.Fragment>\n        {this.state.multiStreamSelection && (\n          <MultiStreamModal\n            streams={this.state.multiStreamSelection}\n            setMedia={this.setMedia}\n            resetMultiSelect={this.resetMultiSelect}\n          />\n        )}\n        {this.state.isSubscribeModalOpen && (\n          <SubscribeModal\n            user={this.state.user}\n            isSubscriber={this.state.isSubscriber}\n            closeSubscribe={() =>\n              this.setState({ isSubscribeModalOpen: false })\n            }\n          />\n        )}\n        {this.state.isVBrowserModalOpen && (\n          <VBrowserModal\n            isSubscriber={this.state.isSubscriber}\n            closeModal={() => this.setState({ isVBrowserModalOpen: false })}\n            openSubscribe={() => this.setState({ isSubscribeModalOpen: true })}\n            startVBrowser={this.setupVBrowser}\n          />\n        )}\n        {this.state.error && <ErrorModal error={this.state.error} />}\n        {this.state.isErrorAuth && (\n          <PasswordModal\n            savedPasswords={this.state.savedPasswords}\n            roomId={this.state.roomId}\n          />\n        )}\n        {this.state.errorMessage && (\n          <Message\n            negative\n            header=\"Error\"\n            content={this.state.errorMessage}\n            style={{ position: 'fixed', bottom: '10px', right: '10px' }}\n          ></Message>\n        )}\n        {this.state.successMessage && (\n          <Message\n            positive\n            header=\"Success\"\n            content={this.state.successMessage}\n            style={{ position: 'fixed', bottom: '10px', right: '10px' }}\n          ></Message>\n        )}\n        {!this.state.error && !this.state.isAutoPlayable && (\n          <Modal inverted basic open>\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Button\n                primary\n                size=\"huge\"\n                onClick={() => {\n                  this.setState({ isAutoPlayable: true });\n                  this.setMute(false);\n                }}\n                icon\n                labelPosition=\"left\"\n              >\n                <Icon name=\"sign-in\" />\n                Join Party\n              </Button>\n            </div>\n          </Modal>\n        )}\n        <TopBar user={this.state.user} />\n        {\n          <Grid stackable celled=\"internally\">\n            <Grid.Row>\n              <Grid.Column width={12} className=\"fullHeightColumn\">\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%',\n                  }}\n                >\n                  <ComboBox\n                    setMedia={this.setMedia}\n                    currentMedia={this.state.currentMedia}\n                    getMediaDisplayName={this.getMediaDisplayName}\n                    launchMultiSelect={this.launchMultiSelect}\n                    streamPath={this.state.settings.streamPath}\n                    mediaPath={this.state.settings.mediaPath}\n                    disabled={!this.haveLock()}\n                  />\n                  <Separator />\n                  <div className=\"mobileStack\" style={{ display: 'flex' }}>\n                    {this.screenShareStream && (\n                      <Button\n                        fluid\n                        className=\"toolButton\"\n                        icon\n                        labelPosition=\"left\"\n                        color=\"red\"\n                        onClick={this.stopScreenShare}\n                        disabled={sharer?.id !== this.socket?.id}\n                      >\n                        <Icon name=\"cancel\" />\n                        Stop Share\n                      </Button>\n                    )}\n                    {!this.screenShareStream && !sharer && !this.isVBrowser() && (\n                      <Popup\n                        content={`Share a tab or an application. Make sure to check \"Share audio\" for best results.`}\n                        trigger={\n                          <Button\n                            fluid\n                            className=\"toolButton\"\n                            disabled={!this.haveLock()}\n                            icon\n                            labelPosition=\"left\"\n                            color={'instagram'}\n                            onClick={this.setupScreenShare}\n                          >\n                            <Icon name={'slideshare'} />\n                            Screenshare\n                          </Button>\n                        }\n                      />\n                    )}\n                    {!this.screenShareStream && !sharer && !this.isVBrowser() && (\n                      <Popup\n                        content=\"Launch a shared virtual browser\"\n                        trigger={\n                          <Button\n                            fluid\n                            className=\"toolButton\"\n                            disabled={!this.haveLock()}\n                            icon\n                            labelPosition=\"left\"\n                            color=\"green\"\n                            onClick={() => {\n                              this.setState({ isVBrowserModalOpen: true });\n                            }}\n                          >\n                            <Icon name=\"desktop\" />\n                            VBrowser\n                          </Button>\n                        }\n                      />\n                    )}\n                    {this.isVBrowser() && (\n                      <Popup\n                        content=\"Choose the person controlling the VBrowser\"\n                        trigger={\n                          <Dropdown\n                            icon=\"keyboard\"\n                            labeled\n                            className=\"icon\"\n                            style={{ height: '36px' }}\n                            button\n                            value={this.state.controller}\n                            placeholder=\"No controller\"\n                            onChange={this.changeController}\n                            selection\n                            disabled={!this.haveLock()}\n                            options={this.state.participants.map((p) => ({\n                              text: this.state.nameMap[p.id] || p.id,\n                              value: p.id,\n                            }))}\n                          ></Dropdown>\n                        }\n                      />\n                    )}\n                    {this.isVBrowser() && (\n                      <Dropdown\n                        icon=\"desktop\"\n                        labeled\n                        className=\"icon\"\n                        style={{ height: '36px' }}\n                        button\n                        disabled={!this.haveLock()}\n                        value={this.state.vBrowserResolution}\n                        onChange={(e, data) =>\n                          this.setState({\n                            vBrowserResolution: data.value as string,\n                          })\n                        }\n                        selection\n                        options={[\n                          {\n                            text: '1080p',\n                            value: '1920x1080@30',\n                            disabled: !this.state.isVBrowserLarge,\n                          },\n                          {\n                            text: '720p',\n                            value: '1280x720@30',\n                          },\n                          {\n                            text: '576p',\n                            value: '1024x576@60',\n                          },\n                          {\n                            text: '486p',\n                            value: '864x486@60',\n                          },\n                          {\n                            text: '360p',\n                            value: '640x360@60',\n                          },\n                        ]}\n                      ></Dropdown>\n                    )}\n                    {this.isVBrowser() && (\n                      <Button\n                        fluid\n                        className=\"toolButton\"\n                        icon\n                        labelPosition=\"left\"\n                        color=\"red\"\n                        disabled={!this.haveLock()}\n                        onClick={this.stopVBrowser}\n                      >\n                        <Icon name=\"cancel\" />\n                        Stop VBrowser\n                      </Button>\n                    )}\n                    {!this.screenShareStream && !sharer && !this.isVBrowser() && (\n                      <Popup\n                        content=\"Stream your own video file\"\n                        trigger={\n                          <Button\n                            fluid\n                            className=\"toolButton\"\n                            disabled={!this.haveLock()}\n                            icon\n                            labelPosition=\"left\"\n                            onClick={this.setupFileShare}\n                          >\n                            <Icon name=\"file\" />\n                            File\n                          </Button>\n                        }\n                      />\n                    )}\n                    {false && (\n                      <SearchComponent\n                        setMedia={this.setMedia}\n                        type={'youtube'}\n                        streamPath={this.state.settings.streamPath}\n                        mediaPath={this.state.settings.mediaPath}\n                        disabled={!this.haveLock()}\n                      />\n                    )}\n                    {Boolean(this.state.settings.mediaPath) && (\n                      <SearchComponent\n                        setMedia={this.setMedia}\n                        type={'media'}\n                        streamPath={this.state.settings.streamPath}\n                        mediaPath={this.state.settings.mediaPath}\n                        disabled={!this.haveLock()}\n                      />\n                    )}\n                    {Boolean(this.state.settings.streamPath) && (\n                      <SearchComponent\n                        setMedia={this.setMedia}\n                        type={'stream'}\n                        streamPath={this.state.settings.streamPath}\n                        mediaPath={this.state.settings.mediaPath}\n                        launchMultiSelect={this.launchMultiSelect}\n                        disabled={!this.haveLock()}\n                      />\n                    )}\n                    {this.state.currentMedia && (\n                      <Popup\n                        content=\"Upload a .srt subtitle file for this video\"\n                        trigger={\n                          <Button\n                            fluid\n                            color=\"violet\"\n                            className=\"toolButton\"\n                            icon\n                            labelPosition=\"left\"\n                            onClick={this.setSubtitle}\n                            disabled={!this.haveLock()}\n                          >\n                            <Icon name=\"closed captioning\" />\n                            Subtitle\n                          </Button>\n                        }\n                      />\n                    )}\n                    {!this.state.isSubscriber && (\n                      <Popup\n                        content=\"Subscribe to help support us and enable additional features!\"\n                        trigger={\n                          <Button\n                            fluid\n                            color=\"orange\"\n                            className=\"toolButton\"\n                            icon\n                            labelPosition=\"left\"\n                            onClick={() =>\n                              this.setState({ isSubscribeModalOpen: true })\n                            }\n                          >\n                            <Icon name=\"plus\" />\n                            Subscribe\n                          </Button>\n                        }\n                      />\n                    )}\n                    {this.state.isSubscriber && (\n                      <Popup\n                        content=\"Manage your subscription\"\n                        trigger={\n                          <Button\n                            fluid\n                            color=\"orange\"\n                            className=\"toolButton\"\n                            icon\n                            labelPosition=\"left\"\n                            onClick={this.onManage}\n                          >\n                            <Icon name=\"wrench\" />\n                            Manage\n                          </Button>\n                        }\n                      />\n                    )}\n                  </div>\n                  <Separator />\n                  <div\n                    id=\"fullScreenContainer\"\n                    className={\n                      this.state.fullScreen ? 'fullScreenContainer' : ''\n                    }\n                    style={{ flexGrow: 1 }}\n                  >\n                    <div\n                      id=\"playerContainer\"\n                      tabIndex={1}\n                      onKeyDown={this.onVideoKeydown}\n                    >\n                      {(this.state.loading ||\n                        !this.state.currentMedia ||\n                        this.state.nonPlayableMedia) && (\n                        <div\n                          id=\"loader\"\n                          className=\"videoContent\"\n                          style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                          }}\n                        >\n                          {this.state.loading && (\n                            <Dimmer active>\n                              <Loader>\n                                {this.isVBrowser()\n                                  ? 'Launching virtual browser. This can take up to a minute.'\n                                  : ''}\n                              </Loader>\n                            </Dimmer>\n                          )}\n                          {!this.state.loading && !this.state.currentMedia && (\n                            <Message\n                              color=\"yellow\"\n                              icon=\"hand point up\"\n                              header=\"You're not watching anything!\"\n                              content=\"Pick something to watch above.\"\n                            />\n                          )}\n                          {!this.state.loading &&\n                            this.state.nonPlayableMedia && (\n                              <Message\n                                color=\"red\"\n                                icon=\"frown\"\n                                header=\"It doesn't look like this is a media file!\"\n                                content=\"Maybe you meant to launch a VBrowser if you're trying to visit a web page?\"\n                              />\n                            )}\n                        </div>\n                      )}\n                      <iframe\n                        style={{\n                          display:\n                            this.isYouTube() && !this.state.loading\n                              ? 'block'\n                              : 'none',\n                        }}\n                        title=\"YouTube\"\n                        id=\"leftYt\"\n                        className=\"videoContent\"\n                        allowFullScreen\n                        frameBorder=\"0\"\n                        allow=\"autoplay\"\n                        src=\"https://www.youtube.com/embed/?enablejsapi=1&controls=0&rel=0\"\n                      />\n                      {this.isVBrowser() &&\n                      this.getVBrowserPass() &&\n                      this.getVBrowserHost() ? (\n                        <VBrowser\n                          username={this.socket.id}\n                          password={this.getVBrowserPass()}\n                          hostname={this.getVBrowserHost()}\n                          controlling={this.state.controller === this.socket.id}\n                          setLoadingFalse={this.setLoadingFalse}\n                          resolution={this.state.vBrowserResolution}\n                          isAutoPlayable={this.state.isAutoPlayable}\n                          setResolution={(data: string) =>\n                            this.setState({ vBrowserResolution: data })\n                          }\n                        />\n                      ) : (\n                        <video\n                          style={{\n                            display:\n                              this.isVideo() && !this.state.loading\n                                ? 'block'\n                                : 'none',\n                            width: '100%',\n                          }}\n                          id=\"leftVideo\"\n                        ></video>\n                      )}\n                      {this.state.fullScreen && this.state.currentMedia && (\n                        <div className=\"controlsContainer\">{controls}</div>\n                      )}\n                    </div>\n                    {this.state.fullScreen && (\n                      <Chat\n                        className=\"fullScreenChat\"\n                        chat={this.state.chat}\n                        nameMap={this.state.nameMap}\n                        pictureMap={this.state.pictureMap}\n                        socket={this.socket}\n                        scrollTimestamp={this.state.scrollTimestamp}\n                        getMediaDisplayName={this.getMediaDisplayName}\n                      />\n                    )}\n                  </div>\n                  {this.state.currentMedia && controls}\n                  {Boolean(this.state.total) && (\n                    <div>\n                      <Progress\n                        size=\"tiny\"\n                        color=\"green\"\n                        inverted\n                        value={this.state.downloaded}\n                        total={this.state.total}\n                        // indicating\n                        label={\n                          Math.min(\n                            (this.state.downloaded / this.state.total) * 100,\n                            100\n                          ).toFixed(2) +\n                          '% - ' +\n                          formatSpeed(this.state.speed) +\n                          ' - ' +\n                          this.state.connections +\n                          ' connections'\n                        }\n                      ></Progress>\n                    </div>\n                  )}\n                </div>\n              </Grid.Column>\n              <Grid.Column\n                width={4}\n                style={{ display: 'flex', flexDirection: 'column' }}\n                className=\"fullHeightColumn\"\n              >\n                <Input\n                  inverted\n                  fluid\n                  label={'Name:'}\n                  value={this.state.myName}\n                  onChange={this.updateName}\n                  icon={\n                    <Icon\n                      onClick={() =>\n                        this.updateName(null, { value: generateName() })\n                      }\n                      name=\"refresh\"\n                      inverted\n                      circular\n                      link\n                    />\n                  }\n                />\n                {/* <Divider inverted horizontal></Divider> */}\n                {!this.state.fullScreen && (\n                  <Menu\n                    inverted\n                    widths={3}\n                    style={{ marginTop: '4px', marginBottom: '4px' }}\n                  >\n                    <Menu.Item\n                      name=\"chat\"\n                      active={this.state.currentTab === 'chat'}\n                      onClick={() => this.setState({ currentTab: 'chat' })}\n                      as=\"a\"\n                    >\n                      {/* <Icon name=\"conversation\" /> */}\n                      Chat\n                    </Menu.Item>\n                    <Menu.Item\n                      name=\"people\"\n                      active={this.state.currentTab === 'people'}\n                      onClick={() => this.setState({ currentTab: 'people' })}\n                      as=\"a\"\n                    >\n                      {/* <Icon name=\"group\" /> */}\n                      Webcam ({this.state.participants.length})\n                    </Menu.Item>\n                  </Menu>\n                )}\n                <Chat\n                  chat={this.state.chat}\n                  nameMap={this.state.nameMap}\n                  pictureMap={this.state.pictureMap}\n                  socket={this.socket}\n                  scrollTimestamp={this.state.scrollTimestamp}\n                  getMediaDisplayName={this.getMediaDisplayName}\n                  hide={this.state.currentTab !== 'chat'}\n                />\n                {this.state.state === 'connected' && (\n                  <VideoChat\n                    socket={this.socket}\n                    participants={this.state.participants}\n                    nameMap={this.state.nameMap}\n                    pictureMap={this.state.pictureMap}\n                    tsMap={this.state.tsMap}\n                    rosterUpdateTS={this.state.rosterUpdateTS}\n                    hide={this.state.currentTab !== 'people'}\n                  />\n                )}\n                <SettingsTab\n                  hide={this.state.currentTab !== 'settings'}\n                  user={this.state.user}\n                  roomLock={this.state.roomLock}\n                  setRoomLock={this.setRoomLock}\n                  socket={this.socket}\n                  isSubscriber={this.state.isSubscriber}\n                  roomId={this.state.roomId}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport const Separator = () => <div style={{ height: '4px', flexShrink: 0 }} />;\n"]},"metadata":{},"sourceType":"module"}