{"ast":null,"code":"var _jsxFileName = \"/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/Settings/SettingsTab.tsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Icon, Divider, Radio, Message, Input, Button, Label } from 'semantic-ui-react'; // import { SignInButton } from '../TopBar/TopBar';\n\nimport { getCurrentSettings, updateSettings } from './LocalSettings';\nimport axios from 'axios';\nimport { serverPath } from '../../utils';\nexport const SettingsTab = ({\n  hide,\n  user,\n  roomLock,\n  setRoomLock,\n  socket,\n  isSubscriber,\n  roomId\n}) => {\n  const [updateTS, setUpdateTS] = useState(0);\n  const [vanity, setVanity] = useState(undefined);\n  const [password, setPassword] = useState(undefined);\n  const [owner, setOwner] = useState(undefined);\n  const [validVanity, setValidVanity] = useState(true);\n  const [validVanityLoading, setValidVanityLoading] = useState(false);\n  const [roomLink, setRoomLink] = useState('');\n  useEffect(() => {\n    if (socket) {\n      socket.emit('CMD:getRoomState');\n\n      const handleRoomState = data => {\n        setOwner(data.owner);\n        setVanity(data.vanity);\n        setPassword(data.password);\n        setRoomLink(getRoomLink(data.vanity));\n      };\n\n      const getRoomLink = vanity => {\n        if (vanity) {\n          return `${window.location.origin}/r/${vanity}`;\n        }\n\n        return `${window.location.origin}${roomId.replace('/', '#')}`;\n      };\n\n      socket.on('REC:getRoomState', handleRoomState);\n      return function cleanup() {\n        socket.off('REC:getRoomState', handleRoomState);\n      };\n    }\n  }, [socket, roomId]);\n  const setRoomState = useCallback(async data => {\n    const token = await (user === null || user === void 0 ? void 0 : user.getIdToken());\n    socket.emit('CMD:setRoomState', {\n      uid: user === null || user === void 0 ? void 0 : user.uid,\n      token,\n      ...data\n    });\n  }, [socket, user]);\n  const setRoomOwner = useCallback(async data => {\n    const token = await (user === null || user === void 0 ? void 0 : user.getIdToken());\n    socket.emit('CMD:setRoomOwner', {\n      uid: user === null || user === void 0 ? void 0 : user.uid,\n      token,\n      ...data\n    });\n  }, [socket, user]);\n  const checkValidVanity = useCallback(async input => {\n    if (!input) {\n      setValidVanity(true);\n      return;\n    }\n\n    setValidVanityLoading(true);\n    const response = await axios.get(serverPath + '/resolveRoom/' + input);\n    const data = response.data;\n    setValidVanityLoading(false); // console.log(data.vanity, vanity);\n\n    if (data && data.vanity && data.vanity !== vanity) {\n      // Already exists and doesn't match current room\n      setValidVanity(false);\n    } else {\n      setValidVanity(true);\n    }\n  }, [setValidVanity, vanity]);\n  const lockDisabled = !Boolean(user) || Boolean(roomLock && roomLock !== (user === null || user === void 0 ? void 0 : user.uid));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: hide ? 'none' : 'block',\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sectionHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, \"Room Settings\"), !user && /*#__PURE__*/React.createElement(Message, {\n    color: \"yellow\",\n    size: \"tiny\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"You need to be signed in to change these settings.\"), /*#__PURE__*/React.createElement(SettingRow, {\n    icon: roomLock ? 'lock' : 'lock open',\n    name: `Lock Room`,\n    description: \"Only the person who locked the room can control the video.\",\n    checked: Boolean(roomLock),\n    disabled: lockDisabled,\n    onChange: (e, data) => setRoomLock(data.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SettingRow, {\n    icon: 'clock',\n    name: `Make Room Permanent`,\n    description: \"Standard rooms are deleted after one day of inactivity. Permanent rooms aren't deleted and can have passwords/custom URLs. Free users can only have one permanent room at a time.\",\n    checked: Boolean(owner),\n    disabled: Boolean(owner && owner !== (user === null || user === void 0 ? void 0 : user.uid)),\n    onChange: (e, data) => setRoomOwner({\n      undo: !data.checked\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), owner && owner === (user === null || user === void 0 ? void 0 : user.uid) && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sectionHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"Admin Settings\"), owner && owner === (user === null || user === void 0 ? void 0 : user.uid) && /*#__PURE__*/React.createElement(SettingRow, {\n    icon: 'key',\n    name: `Set Room Password`,\n    description: \"Users must know this password in order to join the room.\",\n    content: /*#__PURE__*/React.createElement(Input, {\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }),\n    disabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }), owner && owner === (user === null || user === void 0 ? void 0 : user.uid) && /*#__PURE__*/React.createElement(SettingRow, {\n    icon: 'linkify',\n    name: `Set Custom Room URL`,\n    description: \"Set a custom URL for this room. Inappropriate names may be revoked.\",\n    checked: Boolean(roomLock),\n    disabled: !isSubscriber,\n    subOnly: true,\n    content: /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      value: vanity,\n      disabled: !isSubscriber,\n      onChange: e => {\n        checkValidVanity(e.target.value);\n        setVanity(e.target.value);\n      },\n      label: /*#__PURE__*/React.createElement(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 24\n        }\n      }, `${window.location.origin}/r/`),\n      loading: validVanityLoading,\n      fluid: true,\n      size: \"mini\",\n      icon: true,\n      action: validVanity ? /*#__PURE__*/React.createElement(Icon, {\n        name: \"checkmark\",\n        color: \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }\n      }) : /*#__PURE__*/React.createElement(Icon, {\n        name: \"close\",\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      size: \"mini\",\n      fluid: true,\n      icon: true,\n      labelPosition: \"left\",\n      color: \"orange\",\n      title: \"Copy link to clipboard\",\n      onClick: () => {\n        navigator.clipboard.writeText(roomLink);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"copy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }), roomLink), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }), owner && owner === (user === null || user === void 0 ? void 0 : user.uid) && /*#__PURE__*/React.createElement(Button, {\n    primary: true,\n    disabled: !validVanity,\n    labelPosition: \"left\",\n    icon: true,\n    fluid: true,\n    onClick: () => setRoomState({\n      vanity: vanity,\n      password: password\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"save\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }), \"Save Admin Settings\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sectionHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, \"Local Settings\"), /*#__PURE__*/React.createElement(SettingRow, {\n    updateTS: updateTS,\n    icon: \"bell\",\n    name: \"Disable chat notification sound\",\n    description: \"Don't play a sound when a chat message is sent while you're on another tab\",\n    checked: Boolean(getCurrentSettings().disableChatSound),\n    disabled: false,\n    onChange: (e, data) => {\n      updateSettings(JSON.stringify({ ...getCurrentSettings(),\n        disableChatSound: data.checked\n      }));\n      setUpdateTS(Number(new Date()));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst SettingRow = ({\n  icon,\n  name,\n  description,\n  checked,\n  disabled,\n  onChange,\n  updateTS,\n  content,\n  subOnly\n}) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Divider, {\n    inverted: true,\n    horizontal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"large\",\n    name: icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, name, ' ', subOnly ? /*#__PURE__*/React.createElement(Label, {\n    size: \"mini\",\n    color: \"orange\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  }, \"Subscriber only\") : null), !content && /*#__PURE__*/React.createElement(Radio, {\n    style: {\n      marginLeft: 'auto'\n    },\n    toggle: true,\n    checked: checked,\n    disabled: disabled,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"smallText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }, description), content));\n};","map":{"version":3,"sources":["/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/Settings/SettingsTab.tsx"],"names":["React","useState","useEffect","useCallback","Icon","Divider","Radio","Message","Input","Button","Label","getCurrentSettings","updateSettings","axios","serverPath","SettingsTab","hide","user","roomLock","setRoomLock","socket","isSubscriber","roomId","updateTS","setUpdateTS","vanity","setVanity","undefined","password","setPassword","owner","setOwner","validVanity","setValidVanity","validVanityLoading","setValidVanityLoading","roomLink","setRoomLink","emit","handleRoomState","data","getRoomLink","window","location","origin","replace","on","cleanup","off","setRoomState","token","getIdToken","uid","setRoomOwner","checkValidVanity","input","response","get","lockDisabled","Boolean","display","color","e","checked","undo","target","value","navigator","clipboard","writeText","disableChatSound","JSON","stringify","Number","Date","SettingRow","icon","name","description","disabled","onChange","content","subOnly","marginLeft"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SACEC,IADF,EAEEC,OAFF,EAGEC,KAHF,EAKEC,OALF,EAMEC,KANF,EAOEC,MAPF,EAQEC,KARF,QASO,mBATP,C,CAUA;;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,iBAAnD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAYA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,IAD0B;AAE1BC,EAAAA,IAF0B;AAG1BC,EAAAA,QAH0B;AAI1BC,EAAAA,WAJ0B;AAK1BC,EAAAA,MAL0B;AAM1BC,EAAAA,YAN0B;AAO1BC,EAAAA;AAP0B,CAAD,KAQH;AACtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACwB,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAAqB0B,SAArB,CAApC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAqB0B,SAArB,CAAxC;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoB9B,QAAQ,CAAqB0B,SAArB,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACiC,kBAAD,EAAqBC,qBAArB,IAA8ClC,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACmC,QAAD,EAAWC,WAAX,IAA0BpC,QAAQ,CAAS,EAAT,CAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACkB,IAAP,CAAY,kBAAZ;;AACA,YAAMC,eAAe,GAAIC,IAAD,IAAe;AACrCT,QAAAA,QAAQ,CAACS,IAAI,CAACV,KAAN,CAAR;AACAJ,QAAAA,SAAS,CAACc,IAAI,CAACf,MAAN,CAAT;AACAI,QAAAA,WAAW,CAACW,IAAI,CAACZ,QAAN,CAAX;AACAS,QAAAA,WAAW,CAACI,WAAW,CAACD,IAAI,CAACf,MAAN,CAAZ,CAAX;AACD,OALD;;AAMA,YAAMgB,WAAW,GAAIhB,MAAD,IAAoB;AACtC,YAAIA,MAAJ,EAAY;AACV,iBAAQ,GAAEiB,MAAM,CAACC,QAAP,CAAgBC,MAAO,MAAKnB,MAAO,EAA7C;AACD;;AACD,eAAQ,GAAEiB,MAAM,CAACC,QAAP,CAAgBC,MAAO,GAAEtB,MAAM,CAACuB,OAAP,CAAe,GAAf,EAAoB,GAApB,CAAyB,EAA5D;AACD,OALD;;AAMAzB,MAAAA,MAAM,CAAC0B,EAAP,CAAU,kBAAV,EAA8BP,eAA9B;AACA,aAAO,SAASQ,OAAT,GAAmB;AACxB3B,QAAAA,MAAM,CAAC4B,GAAP,CAAW,kBAAX,EAA+BT,eAA/B;AACD,OAFD;AAGD;AACF,GApBQ,EAoBN,CAACnB,MAAD,EAASE,MAAT,CApBM,CAAT;AAqBA,QAAM2B,YAAY,GAAG9C,WAAW,CAC9B,MAAOqC,IAAP,IAAqB;AACnB,UAAMU,KAAK,GAAG,OAAMjC,IAAN,aAAMA,IAAN,uBAAMA,IAAI,CAAEkC,UAAN,EAAN,CAAd;AACA/B,IAAAA,MAAM,CAACkB,IAAP,CAAY,kBAAZ,EAAgC;AAC9Bc,MAAAA,GAAG,EAAEnC,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEmC,GADmB;AAE9BF,MAAAA,KAF8B;AAG9B,SAAGV;AAH2B,KAAhC;AAKD,GAR6B,EAS9B,CAACpB,MAAD,EAASH,IAAT,CAT8B,CAAhC;AAWA,QAAMoC,YAAY,GAAGlD,WAAW,CAC9B,MAAOqC,IAAP,IAAqB;AACnB,UAAMU,KAAK,GAAG,OAAMjC,IAAN,aAAMA,IAAN,uBAAMA,IAAI,CAAEkC,UAAN,EAAN,CAAd;AACA/B,IAAAA,MAAM,CAACkB,IAAP,CAAY,kBAAZ,EAAgC;AAC9Bc,MAAAA,GAAG,EAAEnC,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEmC,GADmB;AAE9BF,MAAAA,KAF8B;AAG9B,SAAGV;AAH2B,KAAhC;AAKD,GAR6B,EAS9B,CAACpB,MAAD,EAASH,IAAT,CAT8B,CAAhC;AAWA,QAAMqC,gBAAgB,GAAGnD,WAAW,CAClC,MAAOoD,KAAP,IAAyB;AACvB,QAAI,CAACA,KAAL,EAAY;AACVtB,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA;AACD;;AACDE,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACA,UAAMqB,QAAQ,GAAG,MAAM3C,KAAK,CAAC4C,GAAN,CAAU3C,UAAU,GAAG,eAAb,GAA+ByC,KAAzC,CAAvB;AACA,UAAMf,IAAI,GAAGgB,QAAQ,CAAChB,IAAtB;AACAL,IAAAA,qBAAqB,CAAC,KAAD,CAArB,CARuB,CASvB;;AACA,QAAIK,IAAI,IAAIA,IAAI,CAACf,MAAb,IAAuBe,IAAI,CAACf,MAAL,KAAgBA,MAA3C,EAAmD;AACjD;AACAQ,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD,KAHD,MAGO;AACLA,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAjBiC,EAkBlC,CAACA,cAAD,EAAiBR,MAAjB,CAlBkC,CAApC;AAoBA,QAAMiC,YAAY,GAChB,CAACC,OAAO,CAAC1C,IAAD,CAAR,IAAkB0C,OAAO,CAACzC,QAAQ,IAAIA,QAAQ,MAAKD,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEmC,GAAX,CAArB,CAD3B;AAGA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEQ,MAAAA,OAAO,EAAE5C,IAAI,GAAG,MAAH,GAAY,OAA3B;AAAoC6C,MAAAA,KAAK,EAAE;AAA3C,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEG,CAAC5C,IAAD,iBACC,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,QAAf;AAAwB,IAAA,IAAI,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAHJ,eAOE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEC,QAAQ,GAAG,MAAH,GAAY,WAD5B;AAEE,IAAA,IAAI,EAAG,WAFT;AAGE,IAAA,WAAW,EAAC,4DAHd;AAIE,IAAA,OAAO,EAAEyC,OAAO,CAACzC,QAAD,CAJlB;AAKE,IAAA,QAAQ,EAAEwC,YALZ;AAME,IAAA,QAAQ,EAAE,CAACI,CAAD,EAAItB,IAAJ,KAAarB,WAAW,CAACqB,IAAI,CAACuB,OAAN,CANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAgBI,oBAAC,UAAD;AACE,IAAA,IAAI,EAAE,OADR;AAEE,IAAA,IAAI,EAAG,qBAFT;AAGE,IAAA,WAAW,EAAC,mLAHd;AAIE,IAAA,OAAO,EAAEJ,OAAO,CAAC7B,KAAD,CAJlB;AAKE,IAAA,QAAQ,EAAE6B,OAAO,CAAC7B,KAAK,IAAIA,KAAK,MAAKb,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEmC,GAAX,CAAf,CALnB;AAME,IAAA,QAAQ,EAAE,CAACU,CAAD,EAAItB,IAAJ,KAAaa,YAAY,CAAC;AAAEW,MAAAA,IAAI,EAAE,CAACxB,IAAI,CAACuB;AAAd,KAAD,CANrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBJ,EAyBGjC,KAAK,IAAIA,KAAK,MAAKb,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEmC,GAAX,CAAd,iBACC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA1BJ,EA4BGtB,KAAK,IAAIA,KAAK,MAAKb,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEmC,GAAX,CAAd,iBACC,oBAAC,UAAD;AACE,IAAA,IAAI,EAAE,KADR;AAEE,IAAA,IAAI,EAAG,mBAFT;AAGE,IAAA,WAAW,EAAC,0DAHd;AAIE,IAAA,OAAO,eACL,oBAAC,KAAD;AACE,MAAA,KAAK,EAAExB,QADT;AAEE,MAAA,QAAQ,EAAGkC,CAAD,IAAOjC,WAAW,CAACiC,CAAC,CAACG,MAAF,CAASC,KAAV,CAF9B;AAGE,MAAA,KAAK,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ;AAWE,IAAA,QAAQ,EAAE,KAXZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7BJ,EA2CGpC,KAAK,IAAIA,KAAK,MAAKb,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEmC,GAAX,CAAd,iBACC,oBAAC,UAAD;AACE,IAAA,IAAI,EAAE,SADR;AAEE,IAAA,IAAI,EAAG,qBAFT;AAGE,IAAA,WAAW,EAAC,qEAHd;AAIE,IAAA,OAAO,EAAEO,OAAO,CAACzC,QAAD,CAJlB;AAKE,IAAA,QAAQ,EAAE,CAACG,YALb;AAME,IAAA,OAAO,EAAE,IANX;AAOE,IAAA,OAAO,eACL,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAEI,MADT;AAEE,MAAA,QAAQ,EAAE,CAACJ,YAFb;AAGE,MAAA,QAAQ,EAAGyC,CAAD,IAAO;AACfR,QAAAA,gBAAgB,CAACQ,CAAC,CAACG,MAAF,CAASC,KAAV,CAAhB;AACAxC,QAAAA,SAAS,CAACoC,CAAC,CAACG,MAAF,CAASC,KAAV,CAAT;AACD,OANH;AAOE,MAAA,KAAK,eAAE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,GAAExB,MAAM,CAACC,QAAP,CAAgBC,MAAO,KAAlC,CAPT;AAQE,MAAA,OAAO,EAAEV,kBARX;AASE,MAAA,KAAK,MATP;AAUE,MAAA,IAAI,EAAC,MAVP;AAWE,MAAA,IAAI,MAXN;AAYE,MAAA,MAAM,EACJF,WAAW,gBACT,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,WAAX;AAAuB,QAAA,KAAK,EAAC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADS,gBAGT,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,KAAK,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAqBE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,IAAI,MAHN;AAIE,MAAA,aAAa,EAAC,MAJhB;AAKE,MAAA,KAAK,EAAC,QALR;AAME,MAAA,KAAK,EAAC,wBANR;AAOE,MAAA,OAAO,EAAE,MAAM;AACbmC,QAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BjC,QAA9B;AACD,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAWE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAYGA,QAZH,CArBF,eAmCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCF,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5CJ,eA4FE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5FF,EA6FGN,KAAK,IAAIA,KAAK,MAAKb,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEmC,GAAX,CAAd,iBACC,oBAAC,MAAD;AACE,IAAA,OAAO,MADT;AAEE,IAAA,QAAQ,EAAE,CAACpB,WAFb;AAGE,IAAA,aAAa,EAAC,MAHhB;AAIE,IAAA,IAAI,MAJN;AAKE,IAAA,KAAK,MALP;AAME,IAAA,OAAO,EAAE,MACPiB,YAAY,CAAC;AACXxB,MAAAA,MAAM,EAAEA,MADG;AAEXG,MAAAA,QAAQ,EAAEA;AAFC,KAAD,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAaE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,wBA9FJ,eAgHE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhHF,eAiHE,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAEL,QADZ;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,IAAI,EAAC,iCAHP;AAIE,IAAA,WAAW,EAAC,4EAJd;AAKE,IAAA,OAAO,EAAEoC,OAAO,CAAChD,kBAAkB,GAAG2D,gBAAtB,CALlB;AAME,IAAA,QAAQ,EAAE,KANZ;AAOE,IAAA,QAAQ,EAAE,CAACR,CAAD,EAAItB,IAAJ,KAAa;AACrB5B,MAAAA,cAAc,CACZ2D,IAAI,CAACC,SAAL,CAAe,EACb,GAAG7D,kBAAkB,EADR;AAEb2D,QAAAA,gBAAgB,EAAE9B,IAAI,CAACuB;AAFV,OAAf,CADY,CAAd;AAMAvC,MAAAA,WAAW,CAACiD,MAAM,CAAC,IAAIC,IAAJ,EAAD,CAAP,CAAX;AACD,KAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjHF,CADF;AAqID,CAvNM;;AAyNP,MAAMC,UAAU,GAAG,CAAC;AAClBC,EAAAA,IADkB;AAElBC,EAAAA,IAFkB;AAGlBC,EAAAA,WAHkB;AAIlBf,EAAAA,OAJkB;AAKlBgB,EAAAA,QALkB;AAMlBC,EAAAA,QANkB;AAOlBzD,EAAAA,QAPkB;AAQlB0D,EAAAA,OARkB;AASlBC,EAAAA;AATkB,CAAD,KAoBb;AACJ,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,QAAQ,MAAjB;AAAkB,IAAA,UAAU,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAE;AAAEtB,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,IAAI,EAAEgB,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IADH,EACS,GADT,EAEGK,OAAO,gBACN,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADM,GAIJ,IANN,CAFF,EAUG,CAACD,OAAD,iBACC,oBAAC,KAAD;AACE,IAAA,KAAK,EAAE;AAAEE,MAAAA,UAAU,EAAE;AAAd,KADT;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,OAAO,EAAEpB,OAHX;AAIE,IAAA,QAAQ,EAAEgB,QAJZ;AAKE,IAAA,QAAQ,EAAEC,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADF,eAqBE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BF,WAA5B,CArBF,EAsBGG,OAtBH,CAFF,CADF;AA6BD,CAlDD","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Icon,\n  Divider,\n  Radio,\n  CheckboxProps,\n  Message,\n  Input,\n  Button,\n  Label,\n} from 'semantic-ui-react';\n// import { SignInButton } from '../TopBar/TopBar';\nimport { getCurrentSettings, updateSettings } from './LocalSettings';\nimport { Socket } from 'socket.io';\nimport axios from 'axios';\nimport { serverPath } from '../../utils';\n\ninterface SettingsTabProps {\n  hide: boolean;\n  user: firebase.User | undefined;\n  roomLock: string;\n  setRoomLock: Function;\n  socket: Socket;\n  isSubscriber: boolean;\n  roomId: string;\n}\n\nexport const SettingsTab = ({\n  hide,\n  user,\n  roomLock,\n  setRoomLock,\n  socket,\n  isSubscriber,\n  roomId,\n}: SettingsTabProps) => {\n  const [updateTS, setUpdateTS] = useState(0);\n  const [vanity, setVanity] = useState<string | undefined>(undefined);\n  const [password, setPassword] = useState<string | undefined>(undefined);\n  const [owner, setOwner] = useState<string | undefined>(undefined);\n  const [validVanity, setValidVanity] = useState(true);\n  const [validVanityLoading, setValidVanityLoading] = useState(false);\n  const [roomLink, setRoomLink] = useState<string>('');\n  useEffect(() => {\n    if (socket) {\n      socket.emit('CMD:getRoomState');\n      const handleRoomState = (data: any) => {\n        setOwner(data.owner);\n        setVanity(data.vanity);\n        setPassword(data.password);\n        setRoomLink(getRoomLink(data.vanity));\n      };\n      const getRoomLink = (vanity: string) => {\n        if (vanity) {\n          return `${window.location.origin}/r/${vanity}`;\n        }\n        return `${window.location.origin}${roomId.replace('/', '#')}`;\n      };\n      socket.on('REC:getRoomState', handleRoomState);\n      return function cleanup() {\n        socket.off('REC:getRoomState', handleRoomState);\n      };\n    }\n  }, [socket, roomId]);\n  const setRoomState = useCallback(\n    async (data: any) => {\n      const token = await user?.getIdToken();\n      socket.emit('CMD:setRoomState', {\n        uid: user?.uid,\n        token,\n        ...data,\n      });\n    },\n    [socket, user]\n  );\n  const setRoomOwner = useCallback(\n    async (data: any) => {\n      const token = await user?.getIdToken();\n      socket.emit('CMD:setRoomOwner', {\n        uid: user?.uid,\n        token,\n        ...data,\n      });\n    },\n    [socket, user]\n  );\n  const checkValidVanity = useCallback(\n    async (input: string) => {\n      if (!input) {\n        setValidVanity(true);\n        return;\n      }\n      setValidVanityLoading(true);\n      const response = await axios.get(serverPath + '/resolveRoom/' + input);\n      const data = response.data;\n      setValidVanityLoading(false);\n      // console.log(data.vanity, vanity);\n      if (data && data.vanity && data.vanity !== vanity) {\n        // Already exists and doesn't match current room\n        setValidVanity(false);\n      } else {\n        setValidVanity(true);\n      }\n    },\n    [setValidVanity, vanity]\n  );\n  const lockDisabled =\n    !Boolean(user) || Boolean(roomLock && roomLock !== user?.uid);\n\n  return (\n    <div style={{ display: hide ? 'none' : 'block', color: 'white' }}>\n      <div className=\"sectionHeader\">Room Settings</div>\n      {!user && (\n        <Message color=\"yellow\" size=\"tiny\">\n          You need to be signed in to change these settings.\n        </Message>\n      )}\n      <SettingRow\n        icon={roomLock ? 'lock' : 'lock open'}\n        name={`Lock Room`}\n        description=\"Only the person who locked the room can control the video.\"\n        checked={Boolean(roomLock)}\n        disabled={lockDisabled}\n        onChange={(e, data) => setRoomLock(data.checked)}\n      />\n      {\n        <SettingRow\n          icon={'clock'}\n          name={`Make Room Permanent`}\n          description=\"Standard rooms are deleted after one day of inactivity. Permanent rooms aren't deleted and can have passwords/custom URLs. Free users can only have one permanent room at a time.\"\n          checked={Boolean(owner)}\n          disabled={Boolean(owner && owner !== user?.uid)}\n          onChange={(e, data) => setRoomOwner({ undo: !data.checked })}\n        />\n      }\n      {owner && owner === user?.uid && (\n        <div className=\"sectionHeader\">Admin Settings</div>\n      )}\n      {owner && owner === user?.uid && (\n        <SettingRow\n          icon={'key'}\n          name={`Set Room Password`}\n          description=\"Users must know this password in order to join the room.\"\n          content={\n            <Input\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              fluid\n            />\n          }\n          disabled={false}\n        />\n      )}\n      {owner && owner === user?.uid && (\n        <SettingRow\n          icon={'linkify'}\n          name={`Set Custom Room URL`}\n          description=\"Set a custom URL for this room. Inappropriate names may be revoked.\"\n          checked={Boolean(roomLock)}\n          disabled={!isSubscriber}\n          subOnly={true}\n          content={\n            <React.Fragment>\n              <Input\n                value={vanity}\n                disabled={!isSubscriber}\n                onChange={(e) => {\n                  checkValidVanity(e.target.value);\n                  setVanity(e.target.value);\n                }}\n                label={<Label>{`${window.location.origin}/r/`}</Label>}\n                loading={validVanityLoading}\n                fluid\n                size=\"mini\"\n                icon\n                action={\n                  validVanity ? (\n                    <Icon name=\"checkmark\" color=\"green\" />\n                  ) : (\n                    <Icon name=\"close\" color=\"red\" />\n                  )\n                }\n              ></Input>\n              <Button\n                size=\"mini\"\n                fluid\n                icon\n                labelPosition=\"left\"\n                color=\"orange\"\n                title=\"Copy link to clipboard\"\n                onClick={() => {\n                  navigator.clipboard.writeText(roomLink);\n                }}\n              >\n                <Icon name=\"copy\" />\n                {roomLink}\n              </Button>\n              <p />\n            </React.Fragment>\n          }\n        />\n      )}\n      <p />\n      {owner && owner === user?.uid && (\n        <Button\n          primary\n          disabled={!validVanity}\n          labelPosition=\"left\"\n          icon\n          fluid\n          onClick={() =>\n            setRoomState({\n              vanity: vanity,\n              password: password,\n            })\n          }\n        >\n          <Icon name=\"save\" />\n          Save Admin Settings\n        </Button>\n      )}\n      {/* MEDIA_PATH */}\n      <div className=\"sectionHeader\">Local Settings</div>\n      <SettingRow\n        updateTS={updateTS}\n        icon=\"bell\"\n        name=\"Disable chat notification sound\"\n        description=\"Don't play a sound when a chat message is sent while you're on another tab\"\n        checked={Boolean(getCurrentSettings().disableChatSound)}\n        disabled={false}\n        onChange={(e, data) => {\n          updateSettings(\n            JSON.stringify({\n              ...getCurrentSettings(),\n              disableChatSound: data.checked,\n            })\n          );\n          setUpdateTS(Number(new Date()));\n        }}\n      />\n    </div>\n  );\n};\n\nconst SettingRow = ({\n  icon,\n  name,\n  description,\n  checked,\n  disabled,\n  onChange,\n  updateTS,\n  content,\n  subOnly,\n}: {\n  icon: string;\n  name: string;\n  description: React.ReactNode;\n  checked?: boolean;\n  disabled: boolean;\n  updateTS?: number;\n  onChange?: (e: React.FormEvent, data: CheckboxProps) => void;\n  content?: React.ReactNode;\n  subOnly?: boolean;\n}) => {\n  return (\n    <React.Fragment>\n      <Divider inverted horizontal />\n      <div>\n        <div style={{ display: 'flex' }}>\n          <Icon size=\"large\" name={icon as any} />\n          <div>\n            {name}{' '}\n            {subOnly ? (\n              <Label size=\"mini\" color=\"orange\">\n                Subscriber only\n              </Label>\n            ) : null}\n          </div>\n          {!content && (\n            <Radio\n              style={{ marginLeft: 'auto' }}\n              toggle\n              checked={checked}\n              disabled={disabled}\n              onChange={onChange}\n            />\n          )}\n        </div>\n        <div className=\"smallText\">{description}</div>\n        {content}\n      </div>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}