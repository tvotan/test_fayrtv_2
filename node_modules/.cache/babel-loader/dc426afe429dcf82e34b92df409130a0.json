{"ast":null,"code":"var _jsxFileName = \"/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/VideoChat/VideoChat.tsx\";\nimport React from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { formatTimestamp, getColorHex, getDefaultPicture, iceServers } from '../../utils';\nexport class VideoChat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.ourStream = void 0;\n    this.videoRefs = {};\n    this.videoPCs = {};\n    this.socket = this.props.socket;\n\n    this.handleSignal = async data => {\n      // Handle messages received from signaling server\n      const msg = data.msg;\n      const from = data.from;\n      const pc = this.videoPCs[from];\n      console.log('recv', from, data);\n\n      if (msg.ice !== undefined) {\n        pc.addIceCandidate(new RTCIceCandidate(msg.ice));\n      } else if (msg.sdp && msg.sdp.type === 'offer') {\n        // console.log('offer');\n        await pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));\n        const answer = await pc.createAnswer();\n        await pc.setLocalDescription(answer);\n        this.sendSignal(from, {\n          sdp: pc.localDescription\n        });\n      } else if (msg.sdp && msg.sdp.type === 'answer') {\n        pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));\n      }\n    };\n\n    this.setupWebRTC = async () => {\n      // Set up our own video\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      });\n      this.ourStream = stream; // alert server we've joined video chat\n\n      this.socket.emit('CMD:joinVideo');\n    };\n\n    this.stopWebRTC = () => {\n      this.ourStream && this.ourStream.getTracks().forEach(track => {\n        track.stop();\n      });\n      this.ourStream = undefined;\n      Object.values(this.videoPCs).forEach(pc => {\n        pc.close();\n      });\n      this.videoPCs = {};\n      this.socket.emit('CMD:leaveVideo');\n    };\n\n    this.toggleVideoWebRTC = () => {\n      if (this.ourStream) {\n        this.ourStream.getVideoTracks()[0].enabled = !this.ourStream.getVideoTracks()[0].enabled;\n      }\n    };\n\n    this.getVideoWebRTC = () => {\n      return this.ourStream && this.ourStream.getVideoTracks()[0].enabled;\n    };\n\n    this.toggleAudioWebRTC = () => {\n      if (this.ourStream) {\n        this.ourStream.getAudioTracks()[0].enabled = !this.ourStream.getAudioTracks()[0].enabled;\n      }\n    };\n\n    this.getAudioWebRTC = () => {\n      return this.ourStream && this.ourStream.getAudioTracks()[0] && this.ourStream.getAudioTracks()[0].enabled;\n    };\n\n    this.updateWebRTC = () => {\n      // TODO teardown connections to people who leave\n      if (!this.ourStream) {\n        // We haven't started video chat, exit\n        return;\n      }\n\n      this.props.participants.forEach(user => {\n        const id = user.id;\n\n        if (!user.isVideoChat || this.videoPCs[id]) {\n          return;\n        }\n\n        if (id === this.socket.id) {\n          this.videoPCs[id] = new RTCPeerConnection();\n          this.videoRefs[id].srcObject = this.ourStream;\n        } else {\n          const pc = new RTCPeerConnection({\n            iceServers: iceServers()\n          });\n          this.videoPCs[id] = pc; // Add our own video as outgoing stream\n          //@ts-ignore\n\n          pc.addStream(this.ourStream);\n\n          pc.onicecandidate = event => {\n            // We generated an ICE candidate, send it to peer\n            if (event.candidate) {\n              this.sendSignal(id, {\n                ice: event.candidate\n              });\n            }\n          }; //@ts-ignore\n\n\n          pc.onaddstream = event => {\n            // Mount the stream from peer\n            const stream = event.stream; // console.log(stream);\n\n            this.videoRefs[id].srcObject = stream;\n          }; // For each pair, have the lexicographically smaller ID be the offerer\n\n\n          const isOfferer = this.socket.id < id;\n\n          if (isOfferer) {\n            pc.onnegotiationneeded = async () => {\n              // Start connection for peer's video\n              const offer = await pc.createOffer();\n              await pc.setLocalDescription(offer);\n              this.sendSignal(id, {\n                sdp: pc.localDescription\n              });\n            };\n          }\n        }\n      });\n    };\n\n    this.sendSignal = async (to, data) => {\n      console.log('send', to, data);\n      this.socket.emit('signal', {\n        to,\n        msg: data\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.socket.on('signal', this.handleSignal);\n  }\n\n  componentWillUnmount() {\n    this.socket.off('signal', this.handleSignal);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.rosterUpdateTS !== prevProps.rosterUpdateTS) {\n      this.updateWebRTC();\n    }\n  }\n\n  render() {\n    const {\n      participants,\n      pictureMap,\n      nameMap,\n      tsMap,\n      socket\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: this.props.hide ? 'none' : 'flex',\n        width: '100%',\n        flexDirection: 'column',\n        overflow: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, !this.ourStream && /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      fluid: true,\n      title: \"Join Video Chat\",\n      color: 'purple',\n      size: \"medium\",\n      icon: true,\n      labelPosition: \"left\",\n      onClick: this.setupWebRTC,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"video\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    }), `Join Video Chat`)), this.ourStream && /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      fluid: true,\n      color: 'red',\n      size: \"medium\",\n      icon: true,\n      labelPosition: \"left\",\n      onClick: this.stopWebRTC,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"external\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }), `Leave`), /*#__PURE__*/React.createElement(Button, {\n      fluid: true,\n      color: this.getVideoWebRTC() ? 'green' : 'red',\n      size: \"medium\",\n      icon: true,\n      labelPosition: \"left\",\n      onClick: this.toggleVideoWebRTC,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: \"video\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }\n    }), this.getVideoWebRTC() ? 'On' : 'Off'), /*#__PURE__*/React.createElement(Button, {\n      fluid: true,\n      color: this.getAudioWebRTC() ? 'green' : 'red',\n      size: \"medium\",\n      icon: true,\n      labelPosition: \"left\",\n      onClick: this.toggleAudioWebRTC,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      name: this.getAudioWebRTC() ? 'microphone' : 'microphone slash',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    }), this.getAudioWebRTC() ? 'On' : 'Off')), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }, participants.map(p => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: p.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'relative' //marginLeft: '4px',\n\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 19\n        }\n      }, this.ourStream && p.isVideoChat ? /*#__PURE__*/React.createElement(\"video\", {\n        ref: el => {\n          this.videoRefs[p.id] = el;\n        },\n        className: \"videoChatContent\",\n        autoPlay: true,\n        muted: p.id === socket.id,\n        \"data-id\": p.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 23\n        }\n      }) : /*#__PURE__*/React.createElement(\"img\", {\n        className: \"videoChatContent\" // broken image: https://ui-avatars.com/api/?name=haidee&background=B03060&size=256&color=ffffff\n        ,\n        src: pictureMap[p.id] || getDefaultPicture(nameMap[p.id], getColorHex(p.id)),\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          bottom: '4px',\n          left: '0px',\n          width: '100%',\n          backgroundColor: 'rgba(0,0,0,0)',\n          color: 'white',\n          borderRadius: '4px',\n          fontSize: '10px',\n          fontWeight: 700,\n          display: 'flex'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        title: nameMap[p.id] || p.id,\n        style: {\n          width: '80px',\n          backdropFilter: 'brightness(80%)',\n          padding: '4px',\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n          overflow: 'hidden',\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 23\n        }\n      }, p.isVideoChat && /*#__PURE__*/React.createElement(Icon, {\n        size: \"small\",\n        name: \"video\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 43\n        }\n      }), nameMap[p.id] || p.id), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backdropFilter: 'brightness(60%)',\n          padding: '4px',\n          flexGrow: 1,\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 23\n        }\n      }, formatTimestamp(tsMap[p.id] || 0))))));\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/tinvotan/Projects/fayrtv/fayr_test/fayrtv_test_2/src/components/VideoChat/VideoChat.tsx"],"names":["React","Button","Icon","formatTimestamp","getColorHex","getDefaultPicture","iceServers","VideoChat","Component","ourStream","videoRefs","videoPCs","socket","props","handleSignal","data","msg","from","pc","console","log","ice","undefined","addIceCandidate","RTCIceCandidate","sdp","type","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","sendSignal","localDescription","setupWebRTC","stream","navigator","mediaDevices","getUserMedia","audio","video","emit","stopWebRTC","getTracks","forEach","track","stop","Object","values","close","toggleVideoWebRTC","getVideoTracks","enabled","getVideoWebRTC","toggleAudioWebRTC","getAudioTracks","getAudioWebRTC","updateWebRTC","participants","user","id","isVideoChat","RTCPeerConnection","srcObject","addStream","onicecandidate","event","candidate","onaddstream","isOfferer","onnegotiationneeded","offer","createOffer","to","componentDidMount","on","componentWillUnmount","off","componentDidUpdate","prevProps","rosterUpdateTS","render","pictureMap","nameMap","tsMap","display","hide","width","flexDirection","overflow","flexWrap","map","p","position","el","bottom","left","backgroundColor","color","borderRadius","fontSize","fontWeight","backdropFilter","padding","textOverflow","whiteSpace","flexGrow","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { Socket } from 'socket.io';\n\nimport {\n  formatTimestamp,\n  getColorHex,\n  getDefaultPicture,\n  iceServers,\n} from '../../utils';\n\ninterface VideoChatProps {\n  socket: Socket;\n  participants: User[];\n  pictureMap: StringDict;\n  nameMap: StringDict;\n  tsMap: NumberDict;\n  rosterUpdateTS: Number;\n  hide?: boolean;\n}\n\nexport class VideoChat extends React.Component<VideoChatProps> {\n  ourStream?: MediaStream;\n  videoRefs: any = {};\n  videoPCs: PCDict = {};\n  socket = this.props.socket;\n\n  componentDidMount() {\n    this.socket.on('signal', this.handleSignal);\n  }\n\n  componentWillUnmount() {\n    this.socket.off('signal', this.handleSignal);\n  }\n\n  componentDidUpdate(prevProps: VideoChatProps) {\n    if (this.props.rosterUpdateTS !== prevProps.rosterUpdateTS) {\n      this.updateWebRTC();\n    }\n  }\n\n  handleSignal = async (data: any) => {\n    // Handle messages received from signaling server\n    const msg = data.msg;\n    const from = data.from;\n    const pc = this.videoPCs[from];\n    console.log('recv', from, data);\n    if (msg.ice !== undefined) {\n      pc.addIceCandidate(new RTCIceCandidate(msg.ice));\n    } else if (msg.sdp && msg.sdp.type === 'offer') {\n      // console.log('offer');\n      await pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n      this.sendSignal(from, { sdp: pc.localDescription });\n    } else if (msg.sdp && msg.sdp.type === 'answer') {\n      pc.setRemoteDescription(new RTCSessionDescription(msg.sdp));\n    }\n  };\n\n  setupWebRTC = async () => {\n    // Set up our own video\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true,\n    });\n    this.ourStream = stream;\n    // alert server we've joined video chat\n    this.socket.emit('CMD:joinVideo');\n  };\n\n  stopWebRTC = () => {\n    this.ourStream &&\n      this.ourStream.getTracks().forEach((track) => {\n        track.stop();\n      });\n    this.ourStream = undefined;\n    Object.values(this.videoPCs).forEach((pc) => {\n      pc.close();\n    });\n    this.videoPCs = {};\n    this.socket.emit('CMD:leaveVideo');\n  };\n\n  toggleVideoWebRTC = () => {\n    if (this.ourStream) {\n      this.ourStream.getVideoTracks()[0].enabled = !this.ourStream.getVideoTracks()[0]\n        .enabled;\n    }\n  };\n\n  getVideoWebRTC = () => {\n    return this.ourStream && this.ourStream.getVideoTracks()[0].enabled;\n  };\n\n  toggleAudioWebRTC = () => {\n    if (this.ourStream) {\n      this.ourStream.getAudioTracks()[0].enabled = !this.ourStream.getAudioTracks()[0]\n        .enabled;\n    }\n  };\n\n  getAudioWebRTC = () => {\n    return (\n      this.ourStream &&\n      this.ourStream.getAudioTracks()[0] &&\n      this.ourStream.getAudioTracks()[0].enabled\n    );\n  };\n\n  updateWebRTC = () => {\n    // TODO teardown connections to people who leave\n    if (!this.ourStream) {\n      // We haven't started video chat, exit\n      return;\n    }\n    this.props.participants.forEach((user) => {\n      const id = user.id;\n      if (!user.isVideoChat || this.videoPCs[id]) {\n        return;\n      }\n      if (id === this.socket.id) {\n        this.videoPCs[id] = new RTCPeerConnection();\n        this.videoRefs[id].srcObject = this.ourStream;\n      } else {\n        const pc = new RTCPeerConnection({ iceServers: iceServers() });\n        this.videoPCs[id] = pc;\n        // Add our own video as outgoing stream\n        //@ts-ignore\n        pc.addStream(this.ourStream);\n        pc.onicecandidate = (event) => {\n          // We generated an ICE candidate, send it to peer\n          if (event.candidate) {\n            this.sendSignal(id, { ice: event.candidate });\n          }\n        };\n        //@ts-ignore\n        pc.onaddstream = (event: any) => {\n          // Mount the stream from peer\n          const stream = event.stream;\n          // console.log(stream);\n          this.videoRefs[id].srcObject = stream;\n        };\n        // For each pair, have the lexicographically smaller ID be the offerer\n        const isOfferer = this.socket.id < id;\n        if (isOfferer) {\n          pc.onnegotiationneeded = async () => {\n            // Start connection for peer's video\n            const offer = await pc.createOffer();\n            await pc.setLocalDescription(offer);\n            this.sendSignal(id, { sdp: pc.localDescription });\n          };\n        }\n      }\n    });\n  };\n\n  sendSignal = async (to: string, data: any) => {\n    console.log('send', to, data);\n    this.socket.emit('signal', { to, msg: data });\n  };\n\n  render() {\n    const { participants, pictureMap, nameMap, tsMap, socket } = this.props;\n    return (\n      <div\n        style={{\n          display: this.props.hide ? 'none' : 'flex',\n          width: '100%',\n          flexDirection: 'column',\n          overflow: 'auto',\n        }}\n      >\n        {!this.ourStream && (\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n            }}\n          >\n            <Button\n              fluid\n              title=\"Join Video Chat\"\n              color={'purple'}\n              size=\"medium\"\n              icon\n              labelPosition=\"left\"\n              onClick={this.setupWebRTC}\n            >\n              <Icon name=\"video\" />\n              {`Join Video Chat`}\n            </Button>\n          </div>\n        )}\n        {this.ourStream && (\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n            }}\n          >\n            <Button\n              fluid\n              color={'red'}\n              size=\"medium\"\n              icon\n              labelPosition=\"left\"\n              onClick={this.stopWebRTC}\n            >\n              <Icon name=\"external\" />\n              {`Leave`}\n            </Button>\n            <Button\n              fluid\n              color={this.getVideoWebRTC() ? 'green' : 'red'}\n              size=\"medium\"\n              icon\n              labelPosition=\"left\"\n              onClick={this.toggleVideoWebRTC}\n            >\n              <Icon name=\"video\" />\n              {this.getVideoWebRTC() ? 'On' : 'Off'}\n            </Button>\n            <Button\n              fluid\n              color={this.getAudioWebRTC() ? 'green' : 'red'}\n              size=\"medium\"\n              icon\n              labelPosition=\"left\"\n              onClick={this.toggleAudioWebRTC}\n            >\n              <Icon\n                name={this.getAudioWebRTC() ? 'microphone' : 'microphone slash'}\n              />\n              {this.getAudioWebRTC() ? 'On' : 'Off'}\n            </Button>\n          </div>\n        )}\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          {participants.map((p) => {\n            return (\n              <div key={p.id}>\n                <div\n                  style={{\n                    position: 'relative',\n                    //marginLeft: '4px',\n                  }}\n                >\n                  <div>\n                    {this.ourStream && p.isVideoChat ? (\n                      <video\n                        ref={(el) => {\n                          this.videoRefs[p.id] = el;\n                        }}\n                        className=\"videoChatContent\"\n                        autoPlay\n                        muted={p.id === socket.id}\n                        data-id={p.id}\n                      />\n                    ) : (\n                      <img\n                        className=\"videoChatContent\"\n                        // broken image: https://ui-avatars.com/api/?name=haidee&background=B03060&size=256&color=ffffff\n                        src={\n                          pictureMap[p.id] ||\n                          getDefaultPicture(nameMap[p.id], getColorHex(p.id))\n                        }\n                        alt=\"\"\n                      />\n                    )}\n                    <div\n                      style={{\n                        position: 'absolute',\n                        bottom: '4px',\n                        left: '0px',\n                        width: '100%',\n                        backgroundColor: 'rgba(0,0,0,0)',\n                        color: 'white',\n                        borderRadius: '4px',\n                        fontSize: '10px',\n                        fontWeight: 700,\n                        display: 'flex',\n                      }}\n                    >\n                      <div\n                        title={nameMap[p.id] || p.id}\n                        style={{\n                          width: '80px',\n                          backdropFilter: 'brightness(80%)',\n                          padding: '4px',\n                          textOverflow: 'ellipsis',\n                          whiteSpace: 'nowrap',\n                          overflow: 'hidden',\n                          display: 'inline-block',\n                        }}\n                      >\n                        {p.isVideoChat && <Icon size=\"small\" name=\"video\" />}\n                        {nameMap[p.id] || p.id}\n                      </div>\n                      <div\n                        style={{\n                          backdropFilter: 'brightness(60%)',\n                          padding: '4px',\n                          flexGrow: 1,\n                          display: 'flex',\n                          justifyContent: 'center',\n                        }}\n                      >\n                        {formatTimestamp(tsMap[p.id] || 0)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}